import { ValidMeasurement } from '../../types';
import { ScrollBarStyleOptions } from './ScrollBar';
import { DestroyOptions } from 'pixi.js';
export type ScrollItemOptions = {
    container: PIXI.Container;
    onClick?: Function;
};
export type ScrollStyleOptions = {
    width?: ValidMeasurement;
    height?: ValidMeasurement;
    backgroundColor: number;
    dividerColor: number;
    dividerPixelHeight: number;
    dividerPercentWidth: number;
    dividerTopPadding: number;
    dividerBottomPadding: number;
    borderOpacity: number;
    xPadding: number;
    yPadding: number;
    scrollBarOptions?: ScrollBarStyleOptions;
};
export type ScrolllPerformanceOptions = {
    disableScrollWheelScroll: boolean;
    disableTouchScroll: boolean;
    visibilityBuffer: number;
    adjustVisibilityTime: number;
};
export declare class ScrollList extends PIXI.Container {
    private scrollStyleOptions;
    private scrollItemsById;
    private options;
    private po;
    private scrollBar;
    private scrollbarScroll;
    private scrollRect;
    private scrollDuration;
    private scrollMask;
    private _currentScroll;
    private lastScroll;
    private __width;
    private __height;
    private pointerdownStart;
    private startingVisibleChildIndex;
    private endingVisibleChildIndex;
    private scrollCurrentDur;
    private currentAdjustVisibilityDelta;
    private animationFrame;
    private nextItemY;
    private scrollToDest;
    private listContainer;
    private backgroundRect;
    private scrollLength;
    private adjustedIndex;
    maxHeight: number;
    private lastOverOption;
    private lastDownOption;
    freezeScroll: boolean;
    private tweenFunc;
    private _needsUpdateScoller;
    private _registeredScrollEvent;
    readonly performanceOptions: ScrolllPerformanceOptions;
    constructor(scrollStyleOptions: ScrollStyleOptions, scrollItemOptions: Array<ScrollItemOptions>, scrollPerformanceOptions?: ScrolllPerformanceOptions);
    private handleScrollWheelScroll;
    destroy(options?: DestroyOptions | boolean): void;
    get utilizedLength(): number;
    get scrollPercent(): number;
    private registerScrollEvents;
    setScrollPercent(n: number): void;
    private findVisible;
    freeze(): void;
    unfreeze(): void;
    toggleFreezeScroll(freeze: boolean): void;
    private _containsPoint;
    resize(w: any, h: any): void;
    private redraw;
    private repositionOptions;
    private adjustVisibility;
    private adjustOptions;
    private animateScroll;
    private applyDrag;
    private applySwipe;
    set currentScroll(value: number);
    get currentScroll(): number;
    addScrollItems(containers: Array<PIXI.Container | PIXI.Sprite | PIXI.Graphics | PIXI.Text>): void;
    addScrollItem(container: PIXI.Container | PIXI.Sprite | PIXI.Graphics | PIXI.Text): void;
    private recalculateHeight;
    spliceScrollItems(fromIndex: any, toIndex?: any, destroyItem?: boolean): void;
    removeScrollItems(indexOrContainer: any, destroyItem?: boolean): boolean;
    private findOptionAtPoint;
    private recurseChildren;
}
//# sourceMappingURL=ScrollList.d.ts.map