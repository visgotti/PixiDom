import { IKeyboardBase } from '../../mixins/KeyboardHandlers';
import { ValidMeasurement } from '../../types';
export type StyleOptions = {
    width?: ValidMeasurement;
    height?: ValidMeasurement;
    cursorHeight: ValidMeasurement;
    cursorWidth: number;
    borderWidth?: number;
    borderColor?: number;
    fontColor: number;
    highlightedFontColor: number;
    cursorColor: number;
    backgroundColor: number;
    highlightedBackgroundColor: number;
    borderOpacity: number;
    xPadding: number;
    yPadding: number;
};
export type StyleOptionsParams = {
    width?: number | string;
    height?: number | string;
    borderWidth?: number;
    borderColor?: number;
    fontColor?: number;
    highlightedFontColor?: number;
    cursorColor?: number;
    cursorHeight?: number | string;
    cursorWidth: number;
    backgroundColor?: number;
    highlightedBackgroundColor?: number;
    borderOpacity?: number;
    xPadding?: number;
    yPadding?: number;
};
declare class TextFieldClass extends PIXI.Container implements IKeyboardBase {
    private styleOptions;
    private cursorSprite;
    private textbox;
    private textboxMask;
    private textSprite;
    private inFocus;
    private cursorIndex;
    private clickedTimestamp;
    private cursorAnimationFrame;
    private lastCursorTs;
    private accCursorTime;
    private toggleCursorTime;
    private cursorIsVisible;
    private _text;
    private _visible;
    private overflowOffsetX;
    private overflowOffsetY;
    private dragIndexStart;
    private dragIndexEnd;
    private inDrag;
    submitKeyCodes: Array<number | string>;
    ignoreKeys: Array<number | string>;
    _maxCharacterLength: number;
    private onFocusHandler;
    private onBlurHandler;
    private onChangeHandler;
    private onSubmitHandler;
    private onCharLimitHandler;
    constructor(font: string, styleOptions?: StyleOptionsParams, maxCharacterLength?: any, ignoreKeys?: any);
    updateStyle(styleOptions: StyleOptionsParams): void;
    private redraw;
    private redrawCursor;
    private redrawText;
    private redrawTextbox;
    private handleMouseUp;
    private handleMouseDown;
    private handleMouseMove;
    private clearRange;
    private handleRangeStart;
    private handleRangeChange;
    private handleRangeFinish;
    private getCursorXFromIndex;
    setCursor(index: number): void;
    moveCursor(indexChange: number): void;
    private getCursorIndexFromX;
    getSelectedChars(): string;
    replaceSelectedWith(replaceWith: any): string;
    getSelectedRangeIndexes(): {
        start: number;
        end: number;
    };
    getSelectedRange(): {
        indexes: {
            start: number;
            end: number;
        };
        x: {
            start: number;
            end: number;
        };
    };
    selectAll(): void;
    private setSelectedRange;
    private charFromPosition;
    removeLeftOfCursor(): void;
    removeRightOfCursor(): void;
    onCharLimit(handler: any): void;
    onChange(handler: any): void;
    onFocus(handler: any): void;
    onBlur(handler: any): void;
    onSubmit(handler: any): void;
    clear(): void;
    submit(): void;
    focus(): void;
    blur(): void;
    set maxCharacterLength(value: number);
    private _change;
    change(value: any): boolean;
    private startCursorAnimation;
    private stopCursorAnimation;
    private blinkCursor;
    private checkForOutsideClick;
    get text(): string;
    set text(value: string);
    set visible(value: boolean);
    get visible(): boolean;
    show(): void;
    hide(): void;
}
declare const TextField: {
    new (...args: any[]): {
        copiedText: string;
        textStates: Array<string>;
        currentStateIndex: number;
        changeStateIndex(change: any): void;
        registerHandlers(): void;
        unregisterHandlers(): void;
        onPaste(event: any): void;
        onCopy(event: any): void;
        onCut(event: any): void;
        onBackspace(): void;
        onDelete(): void;
        onKeyDown(event: Pick<KeyboardEvent, "keyCode" | "which" | "ctrlKey" | "metaKey" | "shiftKey" | "preventDefault" | "code">): void;
        onKeyPress(event: Pick<KeyboardEvent, "keyCode" | "which" | "key" | "ctrlKey" | "metaKey" | "shiftKey" | "preventDefault" | "code">): void;
        addState(newText: any): void;
        ignoreKeys: Array<number | string>;
        submitKeyCodes: Array<number | string>;
        on: (event: string, handler: (event: any) => void) => void;
        off: (event: string, handler: (event: any) => void) => void;
        change: (text: string) => void;
        replaceSelectedWith: (text: string) => string;
        getSelectedChars: () => string;
        setCursor: (n: number) => void;
        moveCursor: (n: number) => void;
        removeLeftOfCursor: () => void;
        removeRightOfCursor: () => void;
        selectAll: () => void;
        submit: () => void;
        getSelectedRange: () => ({
            indexes: {
                start: number;
                end: number;
            };
            x: {
                start: number;
                end: number;
            };
        } | null);
    };
} & typeof TextFieldClass;
export type TextField = InstanceType<typeof TextField>;
export { TextField };
//# sourceMappingURL=TextField.d.ts.map