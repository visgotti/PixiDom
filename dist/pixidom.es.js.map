{"version":3,"file":"pixidom.es.js","sources":["../src/utils.ts","../src/mixins/KeyboardHandlers.ts","../src/Components/TextInput/TextField.ts","../src/Element.ts","../node_modules/tween-functions/index.js","../src/Components/ScrollList/ScrollBar.ts","../src/Components/ScrollList/ScrollList.ts","../src/tween/easingFunctions.ts","../src/tween/easing.ts","../src/tween/color.ts","../src/tween/colorTween.ts","../src/types.ts","../src/Components/Toggle.ts","../src/Components/Button.ts","../src/Components/Slider.ts","../src/index.ts"],"sourcesContent":["import type { ParsedMeasurement, PixiRectLike, ValidMeasurement } from \"./types\";\r\n\r\nNumber.isNaN = Number.isNaN || function(value) {\r\n    return typeof value === \"number\" && isNaN(value);\r\n}\r\n\r\nexport const parseLengthMeasurements = function(measurement: ValidMeasurement): ParsedMeasurement {\r\n    // Handle null or undefined\r\n    if (measurement == null) {\r\n        return {\r\n            valid: false,\r\n            error: 'Measurement cannot be null or undefined'\r\n        };\r\n    }\r\n\r\n    // Handle number type\r\n    if (typeof measurement === 'number') {\r\n        if (isNaN(measurement)) {\r\n            return {\r\n                valid: false,\r\n                error: 'Invalid number value'\r\n            };\r\n        }\r\n        \r\n        if (measurement < 0) {\r\n            return {\r\n                valid: false,\r\n                error: 'Cannot have negative length value'\r\n            };\r\n        }\r\n        \r\n        return {\r\n            valid: true,\r\n            type: 'pixel',\r\n            value: measurement\r\n        };\r\n    }\r\n\r\n    // Handle object type\r\n    if (typeof measurement === 'object' && 'value' in measurement && 'type' in measurement) {\r\n        const { value, type } = measurement;\r\n        \r\n        if (isNaN(value) || value < 0) {\r\n            return {\r\n                valid: false,\r\n                error: 'Invalid or negative value in object'\r\n            };\r\n        }\r\n\r\n        if (type === 'px' || type === 'pixel' || type === 'pixels') {\r\n            return {\r\n                valid: true,\r\n                type: 'pixel',\r\n                value\r\n            };\r\n        } else if (type === '%' || type === 'percent') {\r\n            return {\r\n                valid: true,\r\n                type: 'percent',\r\n                value\r\n            };\r\n        } else {\r\n            return {\r\n                valid: false,\r\n                error: 'Invalid measurement type. Must be px, pixel, pixels, % or percent'\r\n            };\r\n        }\r\n    }\r\n\r\n    // Handle string type\r\n    try {\r\n        const strMeasurement = String(measurement);\r\n        \r\n        // Check for percentage\r\n        if (strMeasurement.endsWith('%')) {\r\n            const value = parseFloat(strMeasurement.slice(0, -1));\r\n            if (isNaN(value)) {\r\n                return {\r\n                    valid: false,\r\n                    error: 'Did not find a valid number in front of % sign'\r\n                };\r\n            }\r\n            return {\r\n                valid: true,\r\n                value,\r\n                type: 'percent'\r\n            };\r\n        } \r\n        // Check for pixel values\r\n        else if (strMeasurement.endsWith('px')) {\r\n            const value = parseFloat(strMeasurement.slice(0, -2));\r\n            if (isNaN(value)) {\r\n                return {\r\n                    valid: false,\r\n                    error: 'Did not find a valid number in front of px'\r\n                };\r\n            }\r\n            if (value < 0) {\r\n                return {\r\n                    valid: false,\r\n                    error: 'Cannot have negative pixel length value'\r\n                };\r\n            }\r\n            return {\r\n                valid: true,\r\n                value,\r\n                type: 'pixel'\r\n            };\r\n        } \r\n        // Try to parse as number\r\n        else {\r\n            const value = parseFloat(strMeasurement);\r\n            if (!isNaN(value)) {\r\n                if (value < 0) {\r\n                    return {\r\n                        valid: false,\r\n                        error: 'Cannot have negative length value'\r\n                    };\r\n                }\r\n                return {\r\n                    valid: true,\r\n                    value,\r\n                    type: 'pixel'\r\n                };\r\n            }\r\n            return {\r\n                valid: false,\r\n                error: 'Length values must either be in %, px, or a valid number'\r\n            };\r\n        }\r\n    } catch (err) {\r\n        return { \r\n            valid: false, \r\n            error: err instanceof Error ? err.message : 'Unknown error parsing measurement' \r\n        };\r\n    }\r\n}\r\n\r\nexport function clamp(num, min, max) {\r\n    return num <= min ? min : num >= max ? max : num;\r\n}\r\n\r\nexport function string2hex(string: string): number {\r\n  return parseInt(string.replace('#', ''), 16);\r\n}\r\n\r\nexport function centerPixiObject(object: PixiRectLike, opts: { axis: 'y', parent?: { height: number } })\r\nexport function centerPixiObject(object: PixiRectLike, opts: { axis: 'x', parent?: { width: number } })\r\nexport function centerPixiObject(object: PixiRectLike, opts: { axis?: 'x' | 'y', parent?: { width?: number, height?: number } }) {\r\n    if(!object.parent && !opts?.parent) throw new Error(`No parent`);\r\n    const parentRect : { width?: number, height?: number } = opts?.parent || object.parent;\r\n    const centerX = () => object.x = parentRect.width / 2 - object.width / 2\r\n    const centerY = () => object.y = parentRect.height / 2 - object.height / 2\r\n    if(opts?.axis) {\r\n      if(opts.axis === 'x') {\r\n        centerX();\r\n      } else if (opts.axis === 'y') {\r\n        centerY();\r\n      }\r\n    } else {\r\n      centerX();\r\n      centerY();\r\n    }\r\n  }","export type IKeyboardBase = {\r\n    ignoreKeys: Array<number | string>;\r\n    submitKeyCodes: Array<number | string>;\r\n    on: (event: string, handler: (event: any) => void) => void;\r\n    off: (event: string, handler: (event: any) => void) => void;\r\n    change: (text: string) => void;\r\n    replaceSelectedWith: (text: string) => string; \r\n    getSelectedChars: () => string;\r\n    setCursor: (n: number) => void;\r\n    moveCursor: (n: number) => void;\r\n    removeLeftOfCursor: () => void;\r\n    removeRightOfCursor: () => void;\r\n    selectAll: () => void;\r\n    submit: () => void;\r\n    getSelectedRange: () =>  ({\r\n        indexes:\r\n            { start: number, end: number },\r\n        x:\r\n            { start: number, end: number }\r\n    } | null)\r\n}\r\ntype Constructor<T = IKeyboardBase> = new (...args: any[]) => T;\r\n\r\nexport default function <TBase extends Constructor>(Base: TBase){\r\n    return class KeyboardHandledInput extends Base {\r\n\r\n        public copiedText: string = '';\r\n        public textStates: Array<string> = [];\r\n        public currentStateIndex: number = -1;\r\n\r\n        constructor(...args: any[]) {\r\n            super(...args);\r\n            this.registerHandlers = this.registerHandlers.bind(this);\r\n            this.unregisterHandlers = this.unregisterHandlers.bind(this);\r\n            this.onCopy = this.onCopy.bind(this);\r\n            this.onPaste = this.onPaste.bind(this);\r\n            this.onCut = this.onCut.bind(this);\r\n            this.onKeyPress = this.onKeyPress.bind(this);\r\n            this.onKeyDown = this.onKeyDown.bind(this);\r\n\r\n            super.on('focus', this.registerHandlers);\r\n            super.on('blur', this.unregisterHandlers);\r\n        }\r\n\r\n        public changeStateIndex(change) {\r\n            const newIndex = this.currentStateIndex = change;\r\n            if(this.textStates[newIndex]) {\r\n                super.change(this.textStates[newIndex]);\r\n                this.currentStateIndex = change;\r\n            }\r\n        }\r\n\r\n        public registerHandlers() {\r\n            document.addEventListener(\"copy\", this.onCopy);\r\n            document.addEventListener(\"cut\", this.onCut);\r\n            document.addEventListener(\"paste\", this.onPaste);\r\n            document.addEventListener(\"keypress\", this.onKeyPress);\r\n            document.addEventListener(\"keydown\", this.onKeyDown);\r\n        }\r\n        public unregisterHandlers() {\r\n            document.removeEventListener(\"copy\", this.onCopy);\r\n            document.removeEventListener(\"cut\", this.onCut);\r\n            document.removeEventListener(\"paste\", this.onPaste);\r\n            document.removeEventListener(\"keypress\", this.onKeyPress);\r\n            document.removeEventListener(\"keydown\", this.onKeyDown);\r\n        }\r\n\r\n        public onPaste(event) {\r\n            const pastedText = event.clipboardData ? event.clipboardData.getData('text/plain') : this.copiedText;\r\n            const newText = super.replaceSelectedWith(pastedText);\r\n            if(newText !== null) {\r\n                this.addState(newText);\r\n            }\r\n        }\r\n\r\n        public onCopy(event) {\r\n            event.preventDefault();\r\n            const selected = super.getSelectedChars();\r\n            if(event.clipboardData) {\r\n                event.clipboardData.setData('text/plain', selected)\r\n            }\r\n            this.copiedText = selected;\r\n        }\r\n\r\n        public onCut(event){\r\n            event.preventDefault();\r\n            const selected = super.getSelectedChars();\r\n            if(event.clipboardData) {\r\n                event.clipboardData.setData('text/plain', selected);\r\n            }\r\n            this.copiedText = selected;\r\n            const newText = super.replaceSelectedWith(\"\");\r\n            if(newText !== null) {\r\n                this.addState(newText);\r\n            }\r\n        };\r\n\r\n        public onBackspace(){};\r\n        public onDelete(){};\r\n\r\n        public onKeyDown(event: Pick<KeyboardEvent, 'keyCode' | 'which' | 'ctrlKey' | 'metaKey' | 'shiftKey' | 'preventDefault' | 'code'>) {\r\n            const code = event.keyCode ?? event.which;\r\n            const key = event.code;\r\n            if(this.submitKeyCodes.includes(code) || this.submitKeyCodes.includes(key)) {\r\n                super.submit();\r\n            } else if (code == 37 || key === \"ArrowLeft\") { // left\r\n                const indexes = super.getSelectedRange()?.indexes;\r\n\r\n                if(!indexes) {\r\n                    super.moveCursor(-1)\r\n                } else {\r\n                    super.setCursor(indexes.start);\r\n                }\r\n            } else if (code == 39 || key === \"ArrowRight\") { // right\r\n                const indexes = super.getSelectedRange()?.indexes;\r\n                if(!indexes) {\r\n                    super.moveCursor(1)\r\n                } else {\r\n                    super.setCursor(indexes.end);\r\n                }\r\n            } else if(code == 8 || key === \"Backspace\") { // backspace\r\n                if(super.getSelectedRange()) {\r\n                    super.replaceSelectedWith(\"\");\r\n                } else {\r\n                    super.removeLeftOfCursor();\r\n                }\r\n            } else if (code == 46 || key === \"Delete\") { //delete\r\n                if(super.getSelectedRange()) {\r\n                    super.replaceSelectedWith(\"\");\r\n                } else {\r\n                    super.removeRightOfCursor();\r\n                }\r\n            } else if(event.ctrlKey || event.metaKey) {\r\n                if(code == 90 || key === \"KeyZ\") { // z\r\n                    const indexChange = event.shiftKey ? 1 : -1; // if shift is pressed we want to do redo behavior\r\n                    this.changeStateIndex(indexChange);\r\n                } else if(code == 65 || key === \"KeyA\") { // a\r\n                    event.preventDefault();\r\n                    super.selectAll();\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        public onKeyPress(event: Pick<KeyboardEvent, 'keyCode' | 'which' | 'key' | 'ctrlKey' | 'metaKey' | 'shiftKey' | 'preventDefault' | 'code'>) {\r\n            const code = event.keyCode ?? event.which;\r\n            const key = event.code;\r\n            if(this.submitKeyCodes.includes(code) || this.submitKeyCodes.includes(key) || this.ignoreKeys.includes(code) || this.ignoreKeys.includes(key) || event.ctrlKey || event.metaKey) {\r\n                return;\r\n            }\r\n            if(code !== null && code !== undefined) {\r\n                const char = String.fromCharCode(code);\r\n                if(char) {\r\n                    event.preventDefault();\r\n                    super.replaceSelectedWith(char);\r\n                }\r\n            } else if (key) {\r\n                const emptyStringKeys = [\r\n                    \"Backspace\",\r\n                    \"Tab\",\r\n                    \"Alt\",\r\n                    \"Pause\",\r\n                    \"CapsLock\",\r\n                    \"Escape\",\r\n                    \"Space\",\r\n                    \"PageUp\",\r\n                    \"PageDown\",\r\n                    \"End\",\r\n                    \"Home\",\r\n                    \"ArrowLeft\",\r\n                    \"ArrowUp\",\r\n                    \"ArrowRight\",\r\n                    \"ArrowDown\",\r\n                    \"Insert\",\r\n                    \"Delete\",\r\n                    \"ContextMenu\",\r\n                    \"NumLock\",\r\n                    \"ScrollLock\",\r\n                    \"PrintScreen\",\r\n                    \"F1\",\r\n                    \"F2\",\r\n                    \"F3\",\r\n                    \"F4\",\r\n                    \"F5\",\r\n                    \"F6\",\r\n                    \"F7\",\r\n                    \"F8\",\r\n                    \"F9\",\r\n                    \"F10\",\r\n                    \"F11\",\r\n                    \"F12\"\r\n                  ];\r\n                \r\n                if(emptyStringKeys.includes(key)) {\r\n                    event.preventDefault();\r\n                    super.replaceSelectedWith('');\r\n                } else {\r\n                    if(event.key && event.key.length === 1) {\r\n                        event.preventDefault();\r\n                        super.replaceSelectedWith(event.key);\r\n                    }\r\n                }\r\n                    \r\n                if (key === \"Backspace\") {\r\n                } else if (key === \"Delete\") {\r\n                    event.preventDefault();\r\n                    super.replaceSelectedWith('');\r\n                } else if (key && key.length === 1) {\r\n                    // Handle printable characters from `key`\r\n                    if (!event.ctrlKey && !event.metaKey) {\r\n                        event.preventDefault();\r\n                        super.replaceSelectedWith(key); // Insert the character\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public addState(newText) {\r\n            this.textStates.push(newText);\r\n            this.currentStateIndex = this.textStates.length - 1;\r\n        }\r\n    }\r\n}","import { parseLengthMeasurements } from \"../../utils\";\r\nimport KeyboardHandlerMixin, { IKeyboardBase } from \"../../mixins/KeyboardHandlers\";\r\nimport { ValidMeasurement } from \"../../types\";\r\n\r\nexport type StyleOptions = {\r\n    width?: ValidMeasurement,\r\n    height?: ValidMeasurement,\r\n    cursorHeight: ValidMeasurement,\r\n    cursorWidth: number,\r\n    borderWidth?: number,\r\n    borderColor?: number,\r\n    fontColor: number,\r\n    highlightedFontColor: number,\r\n    cursorColor: number,\r\n    backgroundColor: number,\r\n    highlightedBackgroundColor: number,\r\n    borderOpacity: number,\r\n    xPadding: number,\r\n    yPadding: number,\r\n}\r\n\r\nexport type StyleOptionsParams = {\r\n    width?: number | string,\r\n    height?: number | string,\r\n    borderWidth?: number,\r\n    borderColor?: number,\r\n    fontColor?: number,\r\n    highlightedFontColor?: number,\r\n    cursorColor?: number,\r\n    cursorHeight?: number | string,\r\n    cursorWidth: number,\r\n    backgroundColor?: number,\r\n    highlightedBackgroundColor?: number,\r\n    borderOpacity?: number,\r\n    xPadding?: number,\r\n    yPadding?: number,\r\n}\r\n\r\nconst defaultStyleOptions = function() : StyleOptionsParams {\r\n    return {\r\n        width: '500px',\r\n        height: '16px',\r\n        fontColor: 0x000000,\r\n        highlightedFontColor: 0xffffff,\r\n        borderColor: 0x000000,\r\n        borderWidth: 1,\r\n        cursorColor: 0x000000,\r\n        cursorHeight: '90%',\r\n        cursorWidth: 1,\r\n        backgroundColor: 0xf7f7f7,\r\n        highlightedBackgroundColor: 0x000080, // navy blue\r\n        borderOpacity: 1,\r\n        xPadding: 0,\r\n        yPadding: 0,\r\n    }\r\n};\r\n\r\nconst lengthFieldsToValidate = [\"width\", \"height\", \"cursorHeight\"];\r\n\r\nclass TextFieldClass extends PIXI.Container implements IKeyboardBase {\r\n    private styleOptions: StyleOptions = {} as StyleOptions;\r\n    private cursorSprite: PIXI.Graphics = new PIXI.Graphics();\r\n    private textbox: PIXI.Graphics = new PIXI.Graphics();\r\n    private textboxMask: PIXI.Graphics = new PIXI.Graphics();\r\n\r\n    private textSprite: PIXI.extras.BitmapText;\r\n    private inFocus: boolean = false;\r\n\r\n    private cursorIndex: number = -1;\r\n    private clickedTimestamp: number;\r\n\r\n    private cursorAnimationFrame: any;\r\n    private lastCursorTs = Date.now();\r\n    private accCursorTime: number = 0;\r\n    private toggleCursorTime: number = 500;\r\n    private cursorIsVisible: boolean = true;\r\n\r\n    private _text: string = \"\";\r\n\r\n    private _visible: boolean = true;\r\n\r\n    private overflowOffsetX: number = 0;\r\n    private overflowOffsetY: number = 0;\r\n    private dragIndexStart: number = 0;\r\n    private dragIndexEnd: number = 0;\r\n    private inDrag: boolean = false;\r\n\r\n    public submitKeyCodes: Array<number | string> = [13, \"Enter\"];\r\n    public ignoreKeys: Array<number | string> = [];\r\n    public _maxCharacterLength: number = null;\r\n\r\n    private onFocusHandler: Function = () => {};\r\n    private onBlurHandler: Function = () => {};\r\n    private onChangeHandler: Function = () => {};\r\n    private onSubmitHandler: Function = () => {};\r\n    private onCharLimitHandler: Function = () => {};\r\n    constructor(font: string, styleOptions?: StyleOptionsParams, maxCharacterLength?, ignoreKeys?) {\r\n        super();\r\n        this.checkForOutsideClick = this.checkForOutsideClick.bind(this);\r\n\r\n        // override destroy method to call blur before destroy so we unregister document handlers if needed.\r\n        const oldDestroy = this.destroy.bind(this);\r\n        this['destroy'] = (options) => {\r\n           this.blur();\r\n           oldDestroy(options);\r\n        }\r\n\r\n        if(ignoreKeys) {\r\n            this.ignoreKeys = ignoreKeys;\r\n        }\r\n        const _defaultStyleOptions = { ...defaultStyleOptions() };\r\n        if(styleOptions) {\r\n            for(let key in styleOptions) {\r\n                _defaultStyleOptions[key] = styleOptions[key];\r\n            }\r\n        }\r\n        this.maxCharacterLength = maxCharacterLength;\r\n    \r\n        this.buttonMode = true;\r\n        this.interactive = true;\r\n\r\n        this.textSprite = new PIXI.extras.BitmapText('', { font, align: \"left\" });\r\n\r\n        this.cursor = \"text\";\r\n\r\n        this.on('pointerdown', this.handleMouseDown.bind(this));\r\n        //this.on('touchstart', this.handleMouseDown.bind(this));\r\n\r\n        this.on('pointerup', this.handleMouseUp.bind(this));\r\n    //    this.on('touchend', this.handleMouseUp.bind(this));\r\n\r\n        this.on('pointermove', this.handleMouseMove.bind(this));\r\n    //    this.on('touchmove', this.handleMouseMove.bind(this));\r\n        this.on('pointerupoutside', this.handleMouseUp.bind(this));\r\n\r\n        this.addChild(this.textboxMask);\r\n        this.addChild(this.textbox);\r\n        this.addChild(this.textSprite);\r\n        this.addChild(this.cursorSprite);\r\n\r\n        this.textSprite.mask = this.textboxMask;\r\n       // this.mask = this.textboxMask;\r\n\r\n        this.updateStyle(_defaultStyleOptions);\r\n\r\n        this.show();\r\n    }\r\n\r\n    public updateStyle(styleOptions: StyleOptionsParams) {\r\n        for(const key in styleOptions) {\r\n            if(lengthFieldsToValidate.includes(key)) {\r\n                const parsed = parseLengthMeasurements(styleOptions[key]);\r\n                if(parsed.error) {\r\n                    throw new Error(`Error for passed in style: ${key}, ${parsed.error}`)\r\n                } else {\r\n                    this.styleOptions[key] = parsed;\r\n                }\r\n            } else {\r\n                this.styleOptions[key] = styleOptions[key];\r\n            }\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    private redraw() {\r\n        this.redrawText();\r\n        this.redrawTextbox();\r\n        this.redrawCursor();\r\n    }\r\n\r\n    private redrawCursor() {\r\n        if(!this.inFocus) {\r\n            this.cursorIsVisible = false;\r\n            this.cursorSprite.visible = false;\r\n            return;\r\n        }\r\n\r\n        const cursorX = this.getCursorXFromIndex(this.cursorIndex) - this.overflowOffsetX;\r\n        this.cursorSprite.clear();\r\n\r\n        this.cursorSprite.lineStyle(this.styleOptions.cursorWidth, this.styleOptions.cursorColor);\r\n\r\n\r\n        const { value, type, error } = parseLengthMeasurements(this.styleOptions.cursorHeight);\r\n        if(error) {\r\n            throw new Error(`Error for passed in style: cursorHeight, ${error}`)\r\n        } \r\n        \r\n        const cursorHeight = type === \"pixel\" ? value : Math.round(this.textbox.height * (value/100));\r\n\r\n        const min = Math.min(this.textbox.height, cursorHeight);\r\n        const max = Math.max(this.textbox.height, cursorHeight);\r\n        const yOffset = (max - min) / 2; // centers cursor vertically\r\n        const bottomOffset = Math.floor(yOffset);\r\n        const topOffset = Math.ceil(yOffset);\r\n\r\n        this.cursorSprite.moveTo(cursorX, bottomOffset).lineTo(cursorX,  cursorHeight - topOffset);\r\n\r\n        // cursor is only visible if theres no range\r\n        if(this.getSelectedRange()) {\r\n            this.cursorIsVisible = false;\r\n            this.cursorSprite.visible = false;\r\n        } else {\r\n            this.cursorIsVisible = true;\r\n            this.cursorSprite.visible = true;\r\n        }\r\n    }\r\n\r\n    private redrawText() {\r\n        const range = this.getSelectedRange();\r\n        this.textSprite.y = this.styleOptions.yPadding;\r\n        this.textSprite.x = this.styleOptions.xPadding;\r\n\r\n        const currentCursorX = this.getCursorXFromIndex(this.dragIndexEnd);\r\n\r\n        const { value, type } = parseLengthMeasurements(this.styleOptions.width);\r\n        const totalWidth = window.innerWidth;\r\n        const maxWidth = type === 'pixel' ? value : totalWidth * (value/100);\r\n\r\n        if(currentCursorX > maxWidth + this.overflowOffsetX) {\r\n            this.overflowOffsetX = currentCursorX - maxWidth;\r\n            this.textSprite.x -= this.overflowOffsetX;\r\n        } else if(currentCursorX > maxWidth) {\r\n            if(currentCursorX < maxWidth + this.overflowOffsetX) {\r\n\r\n                if(currentCursorX < this.overflowOffsetX) {\r\n                    this.overflowOffsetX -= (this.overflowOffsetX - currentCursorX);\r\n                }\r\n\r\n                this.textSprite.x -= this.overflowOffsetX;\r\n            } else {\r\n                this.textSprite.x -= this.overflowOffsetX;\r\n            }\r\n        } else {\r\n            this.overflowOffsetX = 0;\r\n        }\r\n\r\n        for(let i = 0; i < this.textSprite.children.length; i++) {\r\n            const child = this.textSprite.children[i] as PIXI.Sprite;\r\n\r\n            if(range) {\r\n                const { indexes } = range;\r\n                const { start, end } = indexes;\r\n                const withinRange = i >= start && i < end;\r\n                if(withinRange) {\r\n                    child.tint = this.styleOptions.highlightedFontColor;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if(\"fontColor\" in this.styleOptions) {\r\n                child.tint = this.styleOptions.fontColor;\r\n            } else {\r\n                child.tint = 0xFFFFFF\r\n            }\r\n        }\r\n    }\r\n\r\n    private redrawTextbox() {\r\n        this.textbox.clear();\r\n        this.textbox.beginFill(this.styleOptions.backgroundColor, 1);\r\n        if(this.styleOptions.borderWidth > 0 && !Number.isNaN(this.styleOptions.borderWidth)) {\r\n            this.textbox.lineStyle(this.styleOptions.borderWidth, this.styleOptions.borderColor, this.styleOptions.borderOpacity)\r\n        }\r\n\r\n        let { value, type } = parseLengthMeasurements(this.styleOptions.height);\r\n\r\n        const totalWidth = window.innerWidth;\r\n        const totalHeight = window.innerHeight;\r\n\r\n        const height = type === 'pixel' ? value : totalHeight * (value/100);\r\n        ({ value, type } = parseLengthMeasurements(this.styleOptions.width));\r\n        const maxWidth = type === 'pixel' ? value : totalWidth * (value/100);\r\n\r\n        const range = this.getSelectedRange();\r\n\r\n        this.textbox.drawRect(0, 0, maxWidth, height);\r\n        this.textbox.endFill();\r\n\r\n        if(range) {\r\n            let start = range.x.start - this.overflowOffsetX;\r\n            const end = range.x.end - this.overflowOffsetX;\r\n            this.textbox.beginFill(this.styleOptions.highlightedBackgroundColor, 1);\r\n            let _width = end-start;\r\n\r\n            if(start + _width >= maxWidth) {\r\n                _width = maxWidth - start;\r\n            } else {\r\n                _width = end-start;\r\n            }\r\n\r\n            if(start + _width === maxWidth && _width > maxWidth) {\r\n                start = 0;\r\n                _width = maxWidth;\r\n            }\r\n        \r\n            this.textbox.drawRect(start, 0, _width, height);\r\n            this.textbox.endFill();\r\n        }\r\n\r\n        this.textboxMask.clear();\r\n        this.textboxMask.drawRect(0, 0, maxWidth, height);\r\n    }\r\n\r\n    private handleMouseUp(e){\r\n        const { x } = e.data.getLocalPosition(this);\r\n\r\n        if(this.inDrag) {\r\n            this.cursorIndex = this.getCursorIndexFromX(x);\r\n            this.handleRangeFinish();\r\n            // do multi text selext\r\n            //const clicked = this.indexFromPosition(e.position).left;\r\n            //this.multiSelect(this.dragIndexStart, this.indexFromPosition(e.position)\r\n        }\r\n    }\r\n\r\n    private handleMouseDown(e) {\r\n        this.clickedTimestamp = e.data.originalEvent.timeStamp;\r\n        const { x } = e.data.getLocalPosition(this);\r\n        if(!this.inFocus) {\r\n            this.focus();\r\n        }\r\n        this.clearRange();\r\n        this.cursorIndex = this.getCursorIndexFromX(x);\r\n        this.handleRangeStart(this.cursorIndex);\r\n        this.redraw();\r\n    }\r\n\r\n    private handleMouseMove(e) {\r\n        if(this.inDrag) {\r\n            const { x } = e.data.getLocalPosition(this);\r\n            this.handleRangeChange(this.getCursorIndexFromX(x));\r\n        }\r\n    }\r\n\r\n    private clearRange() {\r\n        this.dragIndexEnd = this.cursorIndex;\r\n        this.dragIndexStart = this.cursorIndex;\r\n    }\r\n\r\n    private handleRangeStart(startIndex) {\r\n        this.inDrag = true;\r\n        this.dragIndexStart = startIndex;\r\n        this.dragIndexEnd = startIndex;\r\n    }\r\n\r\n    private handleRangeChange(endIndex) {\r\n        if(endIndex !== this.dragIndexEnd) {\r\n            this.dragIndexEnd = endIndex;\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    private handleRangeFinish() {\r\n        this.inDrag = false;\r\n    }\r\n\r\n    private getCursorXFromIndex(index) {\r\n        let leftChar;\r\n        // if theres no children in the text sprite that means our cursor should get x value for the beginning of the textfield\r\n        if(!this.textSprite.children || !this.textSprite.children.length || index <= 0) {\r\n            if(this.styleOptions.xPadding) {\r\n                return this.styleOptions.xPadding;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        if(index >= this.textSprite.children.length) {\r\n            leftChar = this.textSprite.children[this.textSprite.children.length - 1]\r\n        } else {\r\n            leftChar = this.textSprite.children[index - 1];\r\n        }\r\n        // get the position of character to left plus 1 pixel for padding\r\n        return leftChar.x + leftChar.width + 1 + this.styleOptions.xPadding;\r\n    }\r\n\r\n    public setCursor(index: number) {\r\n        if(index > -1 && index <= this.text.length) {\r\n            this.cursorIndex = index;\r\n            this.clearRange();\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    public moveCursor(indexChange: number) {\r\n        const newCursorIndex = this.cursorIndex + indexChange;\r\n        if(newCursorIndex > -1 && newCursorIndex <= this.text.length) {\r\n            this.cursorIndex = newCursorIndex;\r\n            this.clearRange();\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    private getCursorIndexFromX(x: number) : number {\r\n        x += this.overflowOffsetX;\r\n\r\n        if(x <= 0) {\r\n            return 0;\r\n        }\r\n\r\n        for(let i = 0; i < this.textSprite.children.length; i++) {\r\n            const charChild = this.textSprite.children[i] as any;\r\n            if(charChild.x + charChild.width > x) {\r\n                // click was on right side of character, current cursor index becomes i+1\r\n                if(charChild.x + (charChild.width / 2) < x) {\r\n                    return i+1;\r\n                } else {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return this.textSprite.children.length;\r\n    }\r\n\r\n    public getSelectedChars() {\r\n        const range = this.getSelectedRange();\r\n        if(!range) return \"\";\r\n\r\n         const { indexes } = range;\r\n         const { start, end } = indexes;\r\n         return this.text.substr(start, end - start);\r\n    }\r\n\r\n    public replaceSelectedWith(replaceWith) : string {\r\n        const replaceWithArray = replaceWith.split('');\r\n        \r\n        const replacedLength = replaceWithArray.length;\r\n\r\n        let oldTextValue = this.text;\r\n\r\n        const textArray = this.text.split('');\r\n        let start, end;\r\n        const range = this.getSelectedRangeIndexes();\r\n\r\n        if(range) {\r\n            ({ start, end } = range);\r\n        } else {\r\n            start = end = this.cursorIndex;\r\n        }\r\n        const deleteCount = end - start;\r\n\r\n        textArray.splice(start, deleteCount, ...replaceWithArray);\r\n        if(this._change(textArray.join(''))) {\r\n            this.cursorIndex = start + replacedLength;\r\n            this.clearRange();\r\n            this.redraw();\r\n            return this.text;\r\n        } else {\r\n            return this.text;\r\n        }\r\n    }\r\n\r\n    public getSelectedRangeIndexes() : {\r\n        start: number,\r\n        end: number\r\n    } {\r\n\r\n        const range = this.getSelectedRange();\r\n        if(!range) return null;\r\n\r\n        return { start: range.indexes.start, end: range.indexes.end };\r\n    }\r\n\r\n    public getSelectedRange() : {\r\n            indexes:\r\n                { start: number, end: number },\r\n            x:\r\n                { start: number, end: number }\r\n        } {\r\n\r\n\r\n        const start = Math.min(this.dragIndexStart, this.dragIndexEnd);\r\n        const end = Math.max(this.dragIndexStart, this.dragIndexEnd);\r\n\r\n        if(start === end) return null;\r\n\r\n        const startX = this.getCursorXFromIndex(start);\r\n        const endX = this.getCursorXFromIndex(end);\r\n\r\n        return {\r\n            indexes: { start, end },\r\n            x: { start: startX, end: endX }\r\n        }\r\n    }\r\n\r\n    public selectAll() {\r\n        this.setSelectedRange(0, this.text.length);\r\n    }\r\n    private setSelectedRange(start, end) {\r\n        this.dragIndexStart = start;\r\n        this.dragIndexEnd = end;\r\n        this.cursorIndex = end;\r\n        this.redraw();\r\n    }\r\n\r\n    private charFromPosition(position) : { left?: string, right?: string } {\r\n        return { left: null, right: null };\r\n    }\r\n\r\n    public removeLeftOfCursor() {\r\n        if(this.cursorIndex > 0) {\r\n            const array = this.text.split('');\r\n            array.splice(this.cursorIndex - 1, 1);\r\n            this.cursorIndex--;\r\n            this._change(array.join(''));\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    public removeRightOfCursor() {\r\n        const array = this.text.split('');\r\n        if(array.length && this.cursorIndex < array.length) {\r\n            array.splice(this.cursorIndex, 1);\r\n            this._change(array.join(''));\r\n            this.redraw();\r\n        }\r\n    }\r\n    public onCharLimit(handler) {\r\n        this.onCharLimitHandler = handler;\r\n    }\r\n    public onChange(handler) {\r\n        this.onChangeHandler = handler;\r\n    }\r\n    public onFocus(handler) {\r\n        this.onFocusHandler = handler;\r\n    }\r\n    public onBlur(handler) {\r\n        this.onBlurHandler = handler;\r\n    }\r\n    public onSubmit(handler) {\r\n        this.onSubmitHandler = handler;\r\n    }\r\n\r\n    public clear() {\r\n        this.text = \"\";\r\n        this.cursorIndex = 0;\r\n        this.clearRange();\r\n        this.redraw();\r\n    }\r\n\r\n    public submit() {\r\n        this.onSubmitHandler(this.text);\r\n    }\r\n\r\n    public focus() {\r\n        if(!this.inFocus) {\r\n            document.addEventListener('mousedown', this.checkForOutsideClick);\r\n            this.inFocus = true;\r\n            this.startCursorAnimation();\r\n            this.emit('focus');\r\n            this.onFocusHandler();\r\n        }\r\n    }\r\n\r\n    public blur() {\r\n        if(this.inFocus) {\r\n            document.removeEventListener('mousedown', this.checkForOutsideClick);\r\n            this.inFocus = false;\r\n            this.stopCursorAnimation();\r\n            this.clearRange();\r\n            this.redraw();\r\n            this.emit('blur');\r\n            this.onBlurHandler();\r\n        }\r\n    }\r\n\r\n    set maxCharacterLength(value: number) {\r\n        if(!isNaN(value)) {\r\n            if(value === null || value < 0) {\r\n                this._maxCharacterLength = null;\r\n            } else {\r\n                this._maxCharacterLength = value;\r\n            }\r\n        } else {\r\n            this._maxCharacterLength = null;\r\n        }\r\n    }\r\n\r\n    private _change(value: string) {\r\n        if(value !== this.text) {\r\n            if(this._maxCharacterLength !== null && value.length > this._maxCharacterLength) {\r\n                this.onCharLimitHandler(value);\r\n                return false;\r\n            } else {\r\n                this._text = value;\r\n                this.textSprite.text = value;\r\n                if(this._text === \"\" && this.textSprite.children) {\r\n                    this.textSprite.children.forEach(child => {\r\n                        this.textSprite.removeChild(child);\r\n                    })\r\n                }\r\n                \r\n                this.textSprite.updateTransform();                   \r\n                this.emit('change', value);\r\n                this.onChangeHandler(value);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public change(value) : boolean {\r\n        const c = this._change(value);\r\n        if(c) {\r\n            this.redrawText();\r\n        }\r\n        return c;\r\n    }\r\n\r\n    private startCursorAnimation() {\r\n        if(this.cursorAnimationFrame) {\r\n            this.stopCursorAnimation();\r\n        }\r\n        this.blinkCursor();\r\n    }\r\n\r\n    private stopCursorAnimation() {\r\n        this.cursorSprite.visible = false;\r\n        if(this.cursorAnimationFrame) {\r\n            clearTimeout(this.cursorAnimationFrame);\r\n            this.cursorAnimationFrame = null;\r\n            this.accCursorTime = 0;\r\n        }\r\n    }\r\n\r\n    private blinkCursor() {\r\n        if(this.cursorIsVisible) {\r\n            this.cursorSprite.visible = !this.cursorSprite.visible;\r\n        }\r\n        this.cursorAnimationFrame = setTimeout(this.blinkCursor.bind(this), this.toggleCursorTime);\r\n    }\r\n\r\n    private checkForOutsideClick(e) {\r\n        if(e.timeStamp !== this.clickedTimestamp) {\r\n            this.blur();\r\n        }\r\n    }\r\n\r\n    get text() {\r\n        if(this.textSprite.text === \" \" && this._text !== \" \") {\r\n            return \"\";\r\n        }\r\n        return this.textSprite.text;\r\n    }\r\n\r\n    set text(value) {\r\n        this.change(value);\r\n    }\r\n\r\n    // @ts-ignore\r\n    set visible(value) {\r\n        // @ts-ignore\r\n        super.visible = value;\r\n        this._visible = value;\r\n        if(value) {\r\n            this.startCursorAnimation();\r\n        } else {\r\n            this.stopCursorAnimation();\r\n        }\r\n    }\r\n\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n\r\n    public show() {\r\n        this.visible = true;\r\n    }\r\n\r\n    public hide() {\r\n        this.visible = false;\r\n    }\r\n}\r\n\r\nconst TextField = KeyboardHandlerMixin(TextFieldClass)\r\nexport type TextField = InstanceType<typeof TextField>;\r\n\r\nexport { TextField } ","export class PixiElement extends PIXI.Container {\r\n    public isMouseOver: Boolean = false;\r\n    private elements: Array<Element>= [];\r\n    private dragPosition = null;\r\n    inDrag: Boolean = false;\r\n    private pointerIsDown: Boolean = false;\r\n    private _pointerdownHandler: Function = null;\r\n    private _pointermoveHandler: Function = null;\r\n    private _pointerupHandler: Function = null;\r\n    private _pointerupoutsideHandler: Function = null;\r\n    private _pointeroverHandler: Function = null;\r\n    private _pointeroutHandler: Function = null;\r\n    private _pointertapHandler: Function = null;\r\n    private _doubleclickHandler: Function = null;\r\n    private _dragmoveHandler: Function = null;\r\n    private _dragendHandler: Function = null;\r\n    private _dragstartHandler: Function = null;\r\n    private _swipeupHandler: Function = null;\r\n    private _swipedownHandler: Function = null;\r\n    private _swipeHandler: Function = null;\r\n\r\n    private doubleClickTimeout: any = null;\r\n\r\n    private _addChild: Function;\r\n\r\n    private completedTriggerTimeout: boolean = null;\r\n    private holdDragTriggerTime: number = 30;\r\n    private holdDragTriggerTimeout: any = null;\r\n\r\n    private helddownCountHandlers: any = {};\r\n    private helddownTimeouts: Array<any> = [];\r\n\r\n    private ifDragEndEmitSwipeDistance: number = 0;\r\n\r\n    private swipeStartY: number;\r\n    private swipeStartTs: number;\r\n    private swipeEndY: number;\r\n\r\n\r\n    private startDragY: number;\r\n    private lastDragCheckTs: number;\r\n    private curDragSwiperCheckIterationDuration: number;\r\n    private curDragSwipePowerIterationQueue: Array<number> = [];\r\n    private lastDragDistance: number = 0;\r\n\r\n    private lastDragY: number = 0;\r\n    private dragDistanceY: number;\r\n\r\n    public maxSwipeTimeout: number = 300;\r\n    public minSwipeDistance: number = 200;\r\n\r\n    private hasSwipeHandler: boolean = false;\r\n    private missedDiffs: number = 0;\r\n    constructor() {\r\n        super();\r\n        this._addChild = super.addChild;\r\n\r\n        this.on('pointerover', () => {\r\n            this.isMouseOver = true;\r\n        });\r\n        this.on('pointerout', () => {\r\n            this.isMouseOver = false;\r\n        });\r\n    }\r\n\r\n    set pointerdownHandler(handler) { this._setEventNameHandler(\"pointerdown\", handler); }\r\n    set pointerupHandler(handler) { this._setEventNameHandler(\"pointerup\", handler); }\r\n    set pointerupoutsideHandler(handler) {  this._setEventNameHandler(\"pointerupoutside\", handler); }\r\n    set pointeroverHandler(handler) { this._setEventNameHandler(\"pointerover\", handler); }\r\n    set pointermoveHandler(handler) { this._setEventNameHandler(\"pointermove\", handler); }\r\n    set pointeroutHandler(handler) { this._setEventNameHandler(\"pointerout\", handler); }\r\n    set pointertapHandler(handler) { this._setEventNameHandler(\"pointertap\", handler); }\r\n\r\n    set doubleclickHandler(handler) { this._setEventNameHandler(\"doubleclick\", handler); }\r\n    set dragstartHandler(handler) {this._setEventNameHandler(\"dragstart\", handler);}\r\n    set dragendHandler(handler) { this._setEventNameHandler(\"dragend\", handler); }\r\n    set dragmoveHandler(handler) {this._setEventNameHandler(\"dragmove\", handler); }\r\n\r\n    private _setHeldDownHandler(handler, timeout: number) {\r\n        if(this.helddownCountHandlers[timeout]) {\r\n            console.warn('already had held down timeout for duration at', timeout, 'this will override it.')\r\n        }\r\n        this.helddownCountHandlers[timeout] = handler;\r\n    }\r\n\r\n    private _setEventNameHandler(eventName, handler) {\r\n        const currentHandler =  this[`_${eventName}Handler`];\r\n        // register private handler if we never had a user defined one\r\n        if(!currentHandler) {\r\n            this.on(eventName, this[`__${eventName}`]);\r\n        }\r\n        // set user defined handler\r\n        this[`_${eventName}Handler`] = handler;\r\n\r\n        // if button mode wasnt enabled yet, we now do so.\r\n        if(!this.buttonMode) {\r\n            this.buttonMode = true;\r\n            this.interactive = true;\r\n        }\r\n    }\r\n\r\n    public centerX() {\r\n        if(this.parent) {\r\n            this.x = this.parent.width / 2 - this.width / 2;\r\n        }\r\n    }\r\n    public centerY() {\r\n        if(this.parent) {\r\n            this.y = this.parent.height / 2 - this.height / 2;\r\n        }\r\n    }\r\n    public center() {\r\n        this.centerX();\r\n        this.centerY();\r\n    }\r\n    public addElement (element: Element) {\r\n        if(!(element instanceof Element)) {\r\n            throw new Error('addElement called with a non element object')\r\n        }\r\n        this.elements.push(element);\r\n       // super.addChild(element);\r\n    }\r\n    public removeElement(element: Element) {\r\n        this.elements = this.elements.filter(e => e !== element);\r\n     //   super.removeChild(element);\r\n    }\r\n    public onMouseDown(handler) { this.pointerdownHandler = handler; }\r\n    public onMouseUp(handler) { this.pointerupHandler = handler; }\r\n    public onMouseUpOutside(handler) { this.pointerupoutsideHandler = handler };\r\n    public onMouseOver(handler) { this.pointeroverHandler = handler; }\r\n    public onMouseOut(handler) { this.pointeroutHandler = handler; }\r\n    public onMouseMove(handler) { this.pointermoveHandler = handler; }\r\n    public onClick(handler) { this.pointertapHandler = handler; }\r\n    public onHeldDown(handler, timeout: number) {\r\n        !this._pointerdownHandler && this.onMouseDown(() => {});\r\n        this._setHeldDownHandler(handler, timeout)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param handler\r\n     * @param hold - time in milliseconds needed to be held before triggering drag\r\n     */\r\n    public onDragStart(handler, hold?: number) {\r\n        if(hold || hold == 0 && !isNaN(hold)) {\r\n            this.holdDragTriggerTime = hold;\r\n        }\r\n        this.registerDefaultIfNeeded('pointerdown');\r\n        this.registerDefaultIfNeeded('pointerup');\r\n        this.registerDefaultIfNeeded('pointerupoutside');\r\n        this.registerDefaultIfNeeded('pointerout');\r\n        this.dragstartHandler = handler;\r\n    }\r\n    public onDragEnd(handler) {\r\n        this.registerDefaultIfNeeded('pointerup');\r\n        this.registerDefaultIfNeeded('pointerupoutside');\r\n        this.dragendHandler = handler;\r\n    }\r\n    public onDragMove(handler) {\r\n        if(!this._dragstartHandler) {this.onDragStart((event) => {}, this.holdDragTriggerTime)}\r\n        if(!this._dragendHandler) { this.onDragEnd((event) => {})}\r\n        this.registerDefaultIfNeeded('pointermove');\r\n        this.dragmoveHandler = handler;\r\n    }\r\n\r\n    public onDoubleClick(handler) {\r\n        // we need a pointerdownhandler for double click to function correctly\r\n        this.registerDefaultIfNeeded('pointerdown');\r\n        this.doubleclickHandler = handler;\r\n    };\r\n\r\n    public onSwipe(handler) {\r\n        this.hasSwipeHandler = true;\r\n        this.registerDefaultIfNeeded('pointerdown');\r\n        this.registerDefaultIfNeeded('pointerup');\r\n        this.registerDefaultIfNeeded('pointerupoutside');\r\n        if(!this._dragmoveHandler) {\r\n            this.onDragMove(() => {});\r\n        }\r\n        this._swipeHandler = handler;\r\n    }\r\n\r\n    public onSwipeUp(handler) {\r\n        this.hasSwipeHandler = true;\r\n        this.registerDefaultIfNeeded('pointerdown');\r\n        this.registerDefaultIfNeeded('pointerup');\r\n        this.registerDefaultIfNeeded('pointerupoutside');\r\n        this._swipeupHandler = handler;\r\n    }\r\n    public onSwipeDown(handler) {\r\n        this.hasSwipeHandler = true;\r\n        this.registerDefaultIfNeeded('pointerdown');\r\n        this.registerDefaultIfNeeded('pointerup');\r\n        this.registerDefaultIfNeeded('pointerupoutside');\r\n        this._swipedownHandler = handler;\r\n    }\r\n\r\n    private __doubleclick(event) {\r\n        clearTimeout(this.doubleClickTimeout);\r\n        this.doubleClickTimeout = null;\r\n        this._doubleclickHandler && this._doubleclickHandler(event);\r\n    }\r\n\r\n    private clearHelddownTimeouts() {\r\n        this.helddownTimeouts.forEach(t => {\r\n            clearTimeout(t);\r\n        });\r\n        this.helddownTimeouts.length = 0;\r\n    }\r\n\r\n    private registerDefaultIfNeeded(eventName) {\r\n        if(!this[`_${eventName}Handler`]) { this[`${eventName}Handler`] = () => {} };\r\n    }\r\n\r\n    private __pointerdown(event) {\r\n        Object.keys(this.helddownCountHandlers).forEach(time => {\r\n            this.helddownTimeouts.push(\r\n                setTimeout(() => {\r\n                    this.helddownCountHandlers[time](event)\r\n                }, parseInt(time))\r\n            );\r\n        });\r\n\r\n        this.pointerIsDown = true;\r\n        this._pointerdownHandler(event);\r\n\r\n        this.swipeStartTs = Date.now();\r\n        this.swipeStartY = event.data.global.y;\r\n\r\n        if(this._dragstartHandler && !this.inDrag) {\r\n            this.holdDragTriggerTimeout = setTimeout(() => {\r\n                this.completedTriggerTimeout = true;\r\n                this.holdDragTriggerTimeout = null;\r\n            }, this.holdDragTriggerTime)\r\n        }\r\n\r\n        if(this.doubleClickTimeout) {\r\n            this.emit(\"doubleclick\", event);\r\n        } else {\r\n            this.doubleClickTimeout = setTimeout(() => {\r\n                this.doubleClickTimeout = null;\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    private __pointertap(event) {\r\n        this._pointertapHandler(event);\r\n    }\r\n\r\n    private __dragstart(event) {\r\n        this.inDrag = true;\r\n        this.startDragY = event.data.global.y;\r\n        this.lastDragY = event.data.global.y;\r\n        this.lastDragCheckTs = Date.now();\r\n        this._dragstartHandler(event);\r\n    }\r\n\r\n    private __dragmove(event) {\r\n        this._dragmoveHandler(event);\r\n        if(this.hasSwipeHandler) {\r\n            const now = Date.now();\r\n            const delta = now - this.lastDragCheckTs;\r\n            this.lastDragCheckTs = now;\r\n\r\n            this.curDragSwiperCheckIterationDuration += delta;\r\n\r\n            const currentDragY = event.data.global.y;\r\n            const diff = this.lastDragY - currentDragY;\r\n            this.lastDragY = currentDragY;\r\n            if(Math.abs(diff) < 7) {\r\n                this.missedDiffs++;\r\n            } else {\r\n                this.missedDiffs = 0;\r\n            }\r\n            if(this.missedDiffs < 2) {\r\n                if(Math.sign(this.ifDragEndEmitSwipeDistance) != Math.sign(diff)) {\r\n                    this.swipeStartY = currentDragY;\r\n                    this.resetDragSwipeVars();\r\n                }\r\n                if(this.curDragSwiperCheckIterationDuration >= this.maxSwipeTimeout) {\r\n                    if(this.curDragSwipePowerIterationQueue.length) {\r\n                        this.ifDragEndEmitSwipeDistance -= this.curDragSwipePowerIterationQueue.shift();\r\n                    }\r\n                    this.curDragSwipePowerIterationQueue.push(diff);\r\n                    this.ifDragEndEmitSwipeDistance += diff;\r\n                } else {\r\n                    this.ifDragEndEmitSwipeDistance += diff;\r\n                    this.curDragSwipePowerIterationQueue.push(diff);\r\n                }\r\n            } else {\r\n                this.resetDragSwipeVars();\r\n            }\r\n        }\r\n    }\r\n\r\n    private resetDragSwipeVars() {\r\n        this.curDragSwipePowerIterationQueue.length = 0;\r\n        this.ifDragEndEmitSwipeDistance = 0;\r\n        this.curDragSwiperCheckIterationDuration = 0;\r\n    }\r\n\r\n    private __dragend(event) {\r\n        this.inDrag = false;\r\n        this._dragendHandler(event);\r\n\r\n        if(this.hasSwipeHandler) {\r\n            const sign = Math.sign(this.ifDragEndEmitSwipeDistance);\r\n            if(sign) {\r\n                const dur = Math.max(10, this.curDragSwiperCheckIterationDuration);\r\n                const timeDiff = Math.min(this.maxSwipeTimeout, dur);\r\n                const power = (this.ifDragEndEmitSwipeDistance / (timeDiff + 100 / 15)) * 10;\r\n                if(sign > 0 && this._swipedownHandler) {\r\n                    this._swipedownHandler(this.ifDragEndEmitSwipeDistance);\r\n                } else if(this._swipeupHandler) {\r\n                    this._swipeupHandler(this.ifDragEndEmitSwipeDistance);\r\n                }\r\n                this._swipeHandler && this._swipeHandler(power);\r\n            }\r\n            this.resetDragSwipeVars();\r\n        }\r\n        this.ifDragEndEmitSwipeDistance = 0;\r\n    }\r\n\r\n    private __pointermove(event) {\r\n        if(this.pointerIsDown && !this.inDrag && this.completedTriggerTimeout) {\r\n            this.emit(\"dragstart\", event);\r\n        } else if (this.inDrag && this._dragmoveHandler) {\r\n            this.emit(\"dragmove\", event);\r\n        }\r\n        this._pointermoveHandler(event);\r\n    }\r\n\r\n    private __pointerover(event) { this._pointeroverHandler(event); }\r\n\r\n    private __pointerout(event) {\r\n        this.clearHelddownTimeouts();\r\n        this.clearDragTimeouts();\r\n        this._pointeroutHandler(event);\r\n    }\r\n\r\n    private handleSwipeFinish(finishY) {\r\n        if(this.hasSwipeHandler) {\r\n            const yDiff = this.swipeStartY - finishY;\r\n            const timeDiff = Math.max(Date.now() - this.swipeStartTs, 1);\r\n            if(timeDiff < this.maxSwipeTimeout && Math.abs(yDiff) > this.minSwipeDistance) {\r\n                const power = (yDiff / (timeDiff + 100 / 15)) * 10;\r\n                if(Math.abs(power) > 10) {\r\n                    const handler = yDiff > 0 ? this._swipeupHandler : this._swipedownHandler;\r\n                    handler && handler(power);\r\n                    this._swipeHandler && this._swipeHandler(power);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private __pointerupoutside(event) {\r\n        this.clearHelddownTimeouts();\r\n        this.clearDragTimeouts();\r\n        this.handleSwipeFinish(event.data.global.y);\r\n        this.pointerIsDown = false;\r\n        this._pointerupoutsideHandler(event);\r\n        if(this.inDrag) {\r\n            this.emit(\"dragend\", event);\r\n        }\r\n    }\r\n    private __pointerup(event) {\r\n        this.clearHelddownTimeouts();\r\n        this.clearDragTimeouts();\r\n        this.handleSwipeFinish(event.data.global.y);\r\n        this.pointerIsDown = false;\r\n        this._pointerupHandler(event);\r\n        if(this.inDrag) {\r\n            this.emit(\"dragend\", event)\r\n        }\r\n    }\r\n\r\n    private clearDragTimeouts() {\r\n        this.completedTriggerTimeout = false;\r\n        if(this.holdDragTriggerTimeout) {\r\n            clearTimeout(this.holdDragTriggerTimeout);\r\n            this.holdDragTriggerTimeout = null;\r\n        }\r\n    }\r\n\r\n    private repositionSelf() {\r\n        if(this.parent) {\r\n        }\r\n    }\r\n\r\n    public repositionChildren() {\r\n        this.repositionSelf();\r\n        for(let i = 0; i < this.elements.length; i++) {\r\n            const elements = this.elements[i] as Element;\r\n          //  elements.repositionChildren();\r\n        }\r\n        this.children.forEach(c => {\r\n          //  c.repositionChildren();\r\n        });\r\n    }\r\n}","'use strict';\n\n// t: current time, b: beginning value, _c: final value, d: total duration\nvar tweenFunctions = {\n  linear: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * t / d + b;\n  },\n  easeInQuad: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * (t /= d) * t + b;\n  },\n  easeOutQuad: function(t, b, _c, d) {\n    var c = _c - b;\n    return -c * (t /= d) * (t - 2) + b;\n  },\n  easeInOutQuad: function(t, b, _c, d) {\n    var c = _c - b;\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t + b;\n    } else {\n      return -c / 2 * ((--t) * (t - 2) - 1) + b;\n    }\n  },\n  easeInCubic: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * (t /= d) * t * t + b;\n  },\n  easeOutCubic: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * ((t = t / d - 1) * t * t + 1) + b;\n  },\n  easeInOutCubic: function(t, b, _c, d) {\n    var c = _c - b;\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * t + 2) + b;\n    }\n  },\n  easeInQuart: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * (t /= d) * t * t * t + b;\n  },\n  easeOutQuart: function(t, b, _c, d) {\n    var c = _c - b;\n    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\n  },\n  easeInOutQuart: function(t, b, _c, d) {\n    var c = _c - b;\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t + b;\n    } else {\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;\n    }\n  },\n  easeInQuint: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * (t /= d) * t * t * t * t + b;\n  },\n  easeOutQuint: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\n  },\n  easeInOutQuint: function(t, b, _c, d) {\n    var c = _c - b;\n    if ((t /= d / 2) < 1) {\n      return c / 2 * t * t * t * t * t + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\n    }\n  },\n  easeInSine: function(t, b, _c, d) {\n    var c = _c - b;\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  },\n  easeOutSine: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  },\n  easeInOutSine: function(t, b, _c, d) {\n    var c = _c - b;\n    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n  },\n  easeInExpo: function(t, b, _c, d) {\n    var c = _c - b;\n    return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;\n  },\n  easeOutExpo: function(t, b, _c, d) {\n    var c = _c - b;\n    return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;\n  },\n  easeInOutExpo: function(t, b, _c, d) {\n    var c = _c - b;\n    if (t === 0) {\n      return b;\n    }\n    if (t === d) {\n      return b + c;\n    }\n    if ((t /= d / 2) < 1) {\n      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n    } else {\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n    }\n  },\n  easeInCirc: function(t, b, _c, d) {\n    var c = _c - b;\n    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n  },\n  easeOutCirc: function(t, b, _c, d) {\n    var c = _c - b;\n    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n  },\n  easeInOutCirc: function(t, b, _c, d) {\n    var c = _c - b;\n    if ((t /= d / 2) < 1) {\n      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;\n    } else {\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n    }\n  },\n  easeInElastic: function(t, b, _c, d) {\n    var c = _c - b;\n    var a, p, s;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      return b;\n    } else if ((t /= d) === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n  },\n  easeOutElastic: function(t, b, _c, d) {\n    var c = _c - b;\n    var a, p, s;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      return b;\n    } else if ((t /= d) === 1) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * 0.3;\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\n  },\n  easeInOutElastic: function(t, b, _c, d) {\n    var c = _c - b;\n    var a, p, s;\n    s = 1.70158;\n    p = 0;\n    a = c;\n    if (t === 0) {\n      return b;\n    } else if ((t /= d / 2) === 2) {\n      return b + c;\n    }\n    if (!p) {\n      p = d * (0.3 * 1.5);\n    }\n    if (a < Math.abs(c)) {\n      a = c;\n      s = p / 4;\n    } else {\n      s = p / (2 * Math.PI) * Math.asin(c / a);\n    }\n    if (t < 1) {\n      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\n    } else {\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\n    }\n  },\n  easeInBack: function(t, b, _c, d, s) {\n    var c = _c - b;\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    return c * (t /= d) * t * ((s + 1) * t - s) + b;\n  },\n  easeOutBack: function(t, b, _c, d, s) {\n    var c = _c - b;\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  },\n  easeInOutBack: function(t, b, _c, d, s) {\n    var c = _c - b;\n    if (s === void 0) {\n      s = 1.70158;\n    }\n    if ((t /= d / 2) < 1) {\n      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n    } else {\n      return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n    }\n  },\n  easeInBounce: function(t, b, _c, d) {\n    var c = _c - b;\n    var v;\n    v = tweenFunctions.easeOutBounce(d - t, 0, c, d);\n    return c - v + b;\n  },\n  easeOutBounce: function(t, b, _c, d) {\n    var c = _c - b;\n    if ((t /= d) < 1 / 2.75) {\n      return c * (7.5625 * t * t) + b;\n    } else if (t < 2 / 2.75) {\n      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n    } else if (t < 2.5 / 2.75) {\n      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n    } else {\n      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n    }\n  },\n  easeInOutBounce: function(t, b, _c, d) {\n    var c = _c - b;\n    var v;\n    if (t < d / 2) {\n      v = tweenFunctions.easeInBounce(t * 2, 0, c, d);\n      return v * 0.5 + b;\n    } else {\n      v = tweenFunctions.easeOutBounce(t * 2 - d, 0, c, d);\n      return v * 0.5 + c * 0.5 + b;\n    }\n  }\n};\n\nmodule.exports = tweenFunctions;\n","import { PixiElement } from '../../Element';\r\nimport {clamp, parseLengthMeasurements} from \"../../utils\";\r\nimport {ScrollList} from \"./ScrollList\";\r\nexport type SideScrollOptions = {\r\n    width: number,\r\n    height: number,\r\n    color: number\r\n}\r\n\r\nexport type ScrollerStyleOptions = {\r\n    color: number,\r\n    hoverColor: number,\r\n    mouseDownColor: number,\r\n}\r\n\r\nexport type ScrollBarStyleOptions = {\r\n    width: number,\r\n    height: number,\r\n    backgroundColor: number,\r\n    scrollerOptions: ScrollerStyleOptions\r\n}\r\n\r\nexport class ScrollBar extends PixiElement {\r\n    public scrolling : boolean = false;\r\n    private scroller: Scroller;\r\n    private bg: PIXI.Graphics;\r\n    private options: ScrollBarStyleOptions;\r\n    private scrollList : ScrollList;\r\n    constructor(scrollList: ScrollList, options: ScrollBarStyleOptions) {\r\n        super();\r\n        this.scrollList = scrollList;\r\n        // @ts-ignore\r\n        this.options = options || {};\r\n        this.bg = new PIXI.Graphics();\r\n        this.addChild(this.bg);\r\n        this.scroller = new Scroller(this, options.scrollerOptions);\r\n        this.addChild(this.scroller);\r\n        this.scroller.y = 0;\r\n        this.redraw();\r\n        this.registerScrollerEvents();\r\n        let heldDownInterval = 0;\r\n    }\r\n    public resizeScrollBar(parentTotalHeight: number, parentMaxHeight: number,) {\r\n    }\r\n    get visibleLength() {\r\n        return this.scrollList.height;\r\n    }\r\n    get maxLength() {\r\n        return this.scrollList.maxHeight;\r\n    }\r\n    public redraw() {\r\n        this.bg.clear();\r\n        this.bg.beginFill(this.options.backgroundColor || 0xf7f7f7);\r\n        this.bg.drawRect(0, 0, this.options.width, this.visibleLength);\r\n        this.scroller.redraw();\r\n    }\r\n\r\n    public setScrollPercent(n: number) {\r\n        const utilizedSpaceForPercent = this.visibleLength - this.scroller.height;\r\n        const y = utilizedSpaceForPercent * n;\r\n        this.scroller.y = y;\r\n    }\r\n\r\n    private registerScrollerEvents() {\r\n        let lastScrollY:any;\r\n        this.onHeldDown((e) => {\r\n            const mouseY = e.data.global.y -this.getGlobalPosition().y;\r\n            let toY = -1;\r\n            if(mouseY < this.scroller.y) {\r\n                toY = mouseY;\r\n            } else if (mouseY > this.scroller.y + this.scroller.height) {\r\n                toY = mouseY - this.scroller.height\r\n            }\r\n\r\n            if(toY >= 0 && !this.scrolling) {\r\n                this.scroller.y = clamp(toY, 0, this.visibleLength-this.scroller.height);\r\n                this.emitScroll();\r\n            }\r\n        }, 50);\r\n\r\n        let prevMouseY;\r\n        let start;\r\n        this.scroller.onDragStart(event => {\r\n            this.scrolling = true;\r\n        }, 0);\r\n        this.scroller.onDragEnd(event => {\r\n            this.scrolling = false;\r\n        });\r\n        this.scroller.onDragMove(event => {\r\n            event.stopPropagation();\r\n            const movementY = event.data.originalEvent.movementY;\r\n            const mouseY = event.data.global.y;\r\n            const globalP = this.getGlobalPosition();\r\n            const globalScrollY = this.scroller.y + globalP.y;\r\n            let extra = 0;\r\n            if(mouseY > globalScrollY + this.scroller.height) {\r\n                extra = mouseY - (globalScrollY + this.scroller.height);\r\n            } else if (mouseY < globalScrollY) {\r\n                extra = mouseY - globalScrollY;\r\n            }\r\n            this.scroller.y = clamp(this.scroller.y + movementY + extra, 0, this.visibleLength-this.scroller.height);\r\n            this.emitScroll();\r\n        })\r\n    }\r\n    private emitScroll() {\r\n        const utilizedSpaceForPercent = this.visibleLength - this.scroller.height;\r\n        const percent = this.scroller.y / utilizedSpaceForPercent\r\n        this.emit('scrolled', percent);\r\n    }\r\n}\r\n\r\n\r\nclass Scroller extends PixiElement {\r\n    private rect: PIXI.Graphics;\r\n    private curPercent: number;\r\n    private scrollBar : ScrollBar;\r\n    private styleObj : Partial<ScrollerStyleOptions>;\r\n    constructor(scrollBar: ScrollBar, options?: ScrollerStyleOptions) {\r\n        super();\r\n        this.scrollBar = scrollBar;\r\n        this.styleObj = options || {};\r\n        this.rect = new PIXI.Graphics();\r\n        this.addChild(this.rect);\r\n    }\r\n    private setStyle(o: ScrollBarStyleOptions) {\r\n        this.redraw();\r\n    }\r\n    public redraw() {\r\n        this.rect.clear();\r\n        if(this.scrollBar.visibleLength >= this.scrollBar.maxLength) return;\r\n        const length = Math.ceil(this.scrollBar.visibleLength / (this.scrollBar.maxLength / this.scrollBar.visibleLength));\r\n        this.rect.beginFill('color' in this.styleObj ? this.styleObj.color : 0x000000);\r\n        this.rect.drawRect(0, 0, this.scrollBar.width, length);\r\n        this.rect.endFill();\r\n    }\r\n}","import {clamp, parseLengthMeasurements} from \"../../utils\";\r\nexport type ScrollItemOptions = {\r\n    container: PIXI.Container,\r\n    onClick?: Function,\r\n}\r\nimport tweenFunctions from 'tween-functions';\r\n\r\nimport { PixiElement } from \"../../Element\";\r\nimport { ValidMeasurement } from \"../../types\";\r\n\r\nimport {ScrollBar, ScrollBarStyleOptions} from './ScrollBar';\r\nimport type {DestroyOptions} from \"pixi.js\";\r\n\r\nexport type ScrollStyleOptions = {\r\n  width?: ValidMeasurement,\r\n  height?: ValidMeasurement,\r\n  backgroundColor: number,\r\n  dividerColor: number,\r\n  dividerPixelHeight: number,\r\n  dividerPercentWidth: number,\r\n  dividerTopPadding: number,\r\n  dividerBottomPadding: number,\r\n  borderOpacity: number,\r\n  xPadding: number,\r\n  yPadding: number,\r\n  scrollBarOptions?: ScrollBarStyleOptions,\r\n}\r\n\r\nexport type ScrolllPerformanceOptions = {\r\n    disableScrollWheelScroll: boolean;\r\n    disableTouchScroll : boolean;\r\n    visibilityBuffer: number;\r\n    adjustVisibilityTime: number;\r\n}\r\nconst defaultPerformanceOptions = {\r\n    disableTouchScroll: false,\r\n    disableScrollWheelScroll: false,\r\n    visibilityBuffer: 200,\r\n    adjustVisibilityTime: 130,\r\n}\r\n\r\nexport class ScrollList extends PIXI.Container {\r\n    private scrollStyleOptions: ScrollStyleOptions;\r\n    private scrollItemsById: any = {};\r\n    private options: Array<PIXI.Container> = [];\r\n    private po: PixiElement = new PixiElement();\r\n\r\n    private scrollBar: ScrollBar;\r\n    private scrollbarScroll: PIXI.Graphics;\r\n    private scrollRect: PixiElement = new PixiElement();\r\n    private scrollDuration: number = 0;\r\n\r\n    private scrollMask: PIXI.Graphics;\r\n\r\n    private _currentScroll: number = 0;\r\n    private lastScroll: number = 0;\r\n    private __width: number;\r\n    private __height: number;\r\n\r\n    private pointerdownStart: number = 0;\r\n    private startingVisibleChildIndex: number = 0;\r\n    private endingVisibleChildIndex: number = 0;\r\n\r\n    private scrollCurrentDur: number = 0;\r\n    private currentAdjustVisibilityDelta: number = 0;\r\n    private animationFrame: any = null;\r\n    private nextItemY: number = 0;\r\n    private scrollToDest: number = 0;\r\n    private listContainer: PixiElement = new PixiElement();\r\n    private listRect: PIXI.Graphics = new PIXI.Graphics();\r\n    private scrollLength: number = 0;\r\n    private adjustedIndex: number = 0;\r\n    maxHeight: number = 0;\r\n    private lastOverOption: PIXI.Container = null;\r\n    private lastDownOption: PIXI.Container = null;\r\n    public freezeScroll: boolean = false;\r\n    private tweenFunc: Function;\r\n    private _needsUpdateScoller : boolean = true;\r\n    private _registeredScrollEvent : boolean = false;\r\n\r\n    readonly performanceOptions: ScrolllPerformanceOptions;\r\n    constructor(scrollStyleOptions: ScrollStyleOptions, scrollItemOptions: Array<ScrollItemOptions>, scrollPerformanceOptions?: ScrolllPerformanceOptions) {\r\n        super();\r\n        this.handleScrollWheelScroll = this.handleScrollWheelScroll.bind(this);\r\n\r\n        this.interactive = true;\r\n        this.interactiveChildren = true;\r\n        this.__width = parseLengthMeasurements(scrollStyleOptions.width).value;\r\n        this.__height = parseLengthMeasurements(scrollStyleOptions.height).value;\r\n\r\n        this.performanceOptions = scrollPerformanceOptions ? scrollPerformanceOptions : { ...defaultPerformanceOptions };\r\n        if(scrollPerformanceOptions) {\r\n            for(let key in defaultPerformanceOptions) {\r\n                if(!scrollPerformanceOptions.hasOwnProperty(key)) {\r\n                    this.performanceOptions[key] = defaultPerformanceOptions[key];\r\n                }\r\n            }\r\n        }\r\n        this.scrollbarScroll = new PIXI.Graphics();\r\n        this.scrollStyleOptions = scrollStyleOptions;\r\n        this.scrollLength = 0;\r\n        this.scrollMask = new PIXI.Graphics();\r\n        this.scrollMask.beginFill(0xFFFFFF);\r\n        this.scrollMask.drawRect(0, 0, this.__width, this.__height);\r\n        this.scrollMask.endFill();\r\n\r\n        this.listRect.beginFill(0xFFFFFF, 0);\r\n        this.listRect.drawRect(0, 0, this.__width, this.__height);\r\n        this.listRect.endFill();\r\n        this.scrollRect.addChild(this.listRect);\r\n\r\n     //   this.scrollMask.hitArea = new PIXI.Rectangle(0, 0, this.__width, this.__height);\r\n\r\n        this.addChild(this.scrollMask);\r\n        this.addChild(this.po);\r\n        this.po.interactive = true;\r\n        this.po.mask = this.scrollMask;\r\n\r\n     //   this.addChild(this.scrollRect);\r\n\r\n        let lastScrollY;\r\n        let heldTimeout = null;\r\n\r\n        if(!this.performanceOptions.disableScrollWheelScroll) {\r\n            this.registerScrollEvents();\r\n        }\r\n\r\n     //   this.initializeEventPropogation();\r\n        if(!this.performanceOptions.disableTouchScroll) {\r\n            this.scrollRect.onSwipe(this.applySwipe.bind(this));\r\n\r\n            this.on('pointerdown', (event) => {\r\n                if(this.scrollBar && this.scrollBar.scrolling) return;\r\n                if(this.performanceOptions.disableTouchScroll) return;\r\n                if(this.animationFrame !== null) {\r\n                    cancelAnimationFrame(this.animationFrame);\r\n                    if(!this.po.inDrag) {\r\n                        this.po.emit('dragstart', event);\r\n                    }\r\n                    this.animationFrame = null;\r\n                }\r\n            });\r\n            this.on('pointerup', () => {\r\n                if(this.scrollBar && this.scrollBar.scrolling) return;\r\n                if(this.performanceOptions.disableTouchScroll) return;\r\n                if(heldTimeout) {\r\n                    clearTimeout(heldTimeout);\r\n                    heldTimeout = null;\r\n                }\r\n            });\r\n\r\n            this.po.onSwipe(this.applySwipe.bind(this));\r\n            this.po.onDragStart(event => {\r\n                if(this.scrollBar && this.scrollBar.scrolling) return;\r\n                if(this.freezeScroll) return;\r\n                this.tweenFunc = tweenFunctions.easeOutElastic;\r\n                this.scrollLength = 0;\r\n                this.scrollCurrentDur = 0;\r\n                this.scrollDuration = 0;\r\n                this.currentAdjustVisibilityDelta = 0;\r\n                lastScrollY = event.data.global.y;\r\n            });\r\n            this.po.onDragMove(event => {\r\n                if(this.scrollBar && this.scrollBar.scrolling) return;\r\n                if(this.freezeScroll) return;\r\n                const diff =  event.data.global.y - lastScrollY;\r\n                lastScrollY = event.data.global.y;\r\n                this.applyDrag(diff);\r\n            });\r\n            this.po.onDragEnd(event => {\r\n                if(this.scrollBar && this.scrollBar.scrolling) return;\r\n                this.adjustVisibility(null, true);\r\n            });\r\n        }\r\n        if(scrollStyleOptions.scrollBarOptions) {\r\n            this.scrollBar = new ScrollBar(this, scrollStyleOptions.scrollBarOptions);\r\n            this.addChild(this.scrollBar);\r\n            this.scrollBar.on('scrolled', (percent) => {\r\n                this._needsUpdateScoller = false;\r\n                this.setScrollPercent(percent);\r\n                this._needsUpdateScoller = true;\r\n            });\r\n        }\r\n\r\n       // this.po.mask = this.scrollMask;\r\n        this.redraw();\r\n    }\r\n\r\n    private handleScrollWheelScroll(event : WheelEvent) {\r\n        this.currentScroll += event.deltaY;\r\n        this.adjustVisibility(null, true);\r\n    }\r\n\r\n    public destroy(options?: DestroyOptions | boolean) {\r\n        if(this._registeredScrollEvent) {\r\n            document.removeEventListener('wheel', this.handleScrollWheelScroll);\r\n            this._registeredScrollEvent = false;\r\n        }\r\n        super.destroy(options)\r\n    }\r\n\r\n    get utilizedLength() : number {\r\n        return this.maxHeight - this.__height;\r\n    }\r\n\r\n    get scrollPercent() : number {\r\n        return this.currentScroll / this.utilizedLength\r\n    }\r\n\r\n    private registerScrollEvents() {\r\n        this.once('pointerover', () => {\r\n            this._registeredScrollEvent = true;\r\n            document.addEventListener('wheel', this.handleScrollWheelScroll);\r\n            this.once('pointerout', () => {\r\n                document.removeEventListener('wheel', this.handleScrollWheelScroll);\r\n                this._registeredScrollEvent = false;\r\n                this.registerScrollEvents();\r\n            })\r\n        })\r\n    }\r\n\r\n    public setScrollPercent(n : number) {\r\n        n = clamp(n, 0, 1);\r\n        const prev = this.currentScroll;\r\n        this.currentScroll = this.utilizedLength * n;\r\n        if(prev !== this.currentScroll) {\r\n            this.adjustVisibility(null, true);\r\n        }\r\n    }\r\n\r\n    private findVisible() {\r\n\r\n    }\r\n\r\n    public freeze() {\r\n        this.toggleFreezeScroll(true)\r\n    }\r\n    public unfreeze() {\r\n        this.toggleFreezeScroll(false);\r\n    }\r\n    public toggleFreezeScroll(freeze: boolean) {\r\n        this.freezeScroll = freeze;\r\n    }\r\n\r\n    private _containsPoint(container: PIXI.Container, p) {\r\n        p = this.toLocal(p);\r\n        const ix = 0;\r\n        const ax = this.__width;\r\n        const iy = container.y - this.currentScroll;\r\n        const ay = iy + container.height;\r\n\r\n        return (ix <= p.x && p.x <= ax && iy <= p.y && p.y <= ay)\r\n    }\r\n\r\n    public resize(w, h) {\r\n        this.__width = w;\r\n        this.__height = h;\r\n        this.scrollMask.clear();\r\n        this.scrollMask\r\n            .beginFill(0xFFFFFF)\r\n            .drawRect(0, 0, this.__width, this.__height)\r\n            .endFill();\r\n\r\n        this.listRect.clear();\r\n        this.listRect\r\n            .beginFill(this.scrollStyleOptions.backgroundColor)\r\n            .drawRect(0, 0, this.__width, this.__height)\r\n            .endFill();\r\n\r\n        this.adjustVisibility(null, true);\r\n        this.scrollBar && this.scrollBar.redraw();\r\n    }\r\n\r\n    private redraw() {\r\n        this.adjustOptions();\r\n        if(this.scrollBar) {\r\n            this.scrollBar.redraw();\r\n            this.scrollBar.x = this.po.width;\r\n        }\r\n    }\r\n\r\n\r\n    private repositionOptions() {\r\n        let y = 0;\r\n        for(let i = 0; i < this.options.length; i++) {\r\n            this.options[i].y = y;\r\n            y += this.options[i].height\r\n        }\r\n    }\r\n\r\n    private adjustVisibility(delta, force=false) {\r\n        if(force) {\r\n            this.currentAdjustVisibilityDelta = 0;\r\n        } else {\r\n            this.currentAdjustVisibilityDelta += delta;\r\n            if(!force && this.currentAdjustVisibilityDelta >= this.performanceOptions.adjustVisibilityTime) {\r\n                this.currentAdjustVisibilityDelta = 0;\r\n                return;\r\n            }\r\n        }\r\n        let setFirstVisible = false;\r\n        for(let i = 0; i < this.options.length; i++) {\r\n            const option = this.options[i];\r\n            const canSeeFromTop = option.y + option.height + this.performanceOptions.visibilityBuffer >= this.currentScroll;\r\n            const canSeeFromBottom = this.__height + this.currentScroll >= option.y - this.performanceOptions.visibilityBuffer;\r\n            const wasVisible = option.visible;\r\n            option.visible = canSeeFromBottom && canSeeFromTop;\r\n            if(option.visible && !setFirstVisible) {\r\n                this.startingVisibleChildIndex = i;\r\n                setFirstVisible = true;\r\n            }\r\n            if(!option.visible && setFirstVisible) {\r\n                this.endingVisibleChildIndex = Math.min(i + 1, this.options.length - 1);\r\n            }\r\n\r\n            if(wasVisible !== option.visible) {\r\n                if(wasVisible) {\r\n                    option.emit('hide');\r\n                } else {\r\n                    option.emit('show');\r\n                }\r\n                if(option['just_added']) {\r\n                    delete option['just_added'];\r\n                }\r\n            } else if (option['just_added']) {\r\n                if(option.visible) {\r\n                    option.emit('show');\r\n                } else {\r\n                    option.emit('hide');\r\n                }\r\n                delete option['just_added'];\r\n            }\r\n\r\n            if(!option.visible && !wasVisible && setFirstVisible) {\r\n                // dont need to check any more\r\n               // console.log('adjust visibility took', Date.now() - start);\r\n                return;\r\n            }\r\n        }\r\n        // if it gets here it didnt run into an ending visible which means the last item is visible.\r\n        this.endingVisibleChildIndex = this.options.length - 1;\r\n    //    console.log('adjust visibility took', Date.now() - start);\r\n    }\r\n\r\n    private adjustOptions() {\r\n      //  console.log('adjust options', this.currentScroll);\r\n        if(this.po && this.po.parent === this) {\r\n            this.po.y = -this.currentScroll;\r\n            this.adjustedIndex++;\r\n        }\r\n    }\r\n\r\n    private animateScroll(ts: number) {\r\n        const now = Date.now();\r\n        const delta = now - ts;\r\n        this.currentAdjustVisibilityDelta += delta;\r\n        this.scrollCurrentDur += delta;\r\n\r\n        if(this.scrollCurrentDur >= this.scrollDuration) {\r\n            this.animationFrame = null;\r\n            this.currentScroll = this.scrollToDest;\r\n            this.currentAdjustVisibilityDelta = 0;\r\n            this.adjustVisibility(null, true);\r\n            return null;\r\n        }\r\n        this.currentScroll = this.tweenFunc(this.scrollCurrentDur, this.lastScroll, this.scrollToDest, this.scrollDuration);\r\n\r\n        this.adjustVisibility(delta);\r\n\r\n        return requestAnimationFrame(() => {\r\n            if(this.animationFrame !== null) {\r\n                this.animationFrame = this.animateScroll(now);\r\n            }\r\n        });\r\n    }\r\n\r\n    private applyDrag(difference) {\r\n        if(this.animationFrame) return;\r\n\r\n        // scroll height is less than total height.. no need to scroll anything.\r\n        if(this.maxHeight <= this.__height) {\r\n            return;\r\n        }\r\n        if(difference > 0 && this._currentScroll === 0) {\r\n            this.adjustVisibility(null, true);\r\n            return;\r\n        } else if (difference < 0 && this._currentScroll === this.maxHeight - this.__height) {\r\n            this.adjustVisibility(null, true);\r\n            return;\r\n        }\r\n\r\n        this.lastScroll = this._currentScroll;\r\n        this.scrollLength += difference;\r\n\r\n        this.scrollToDest = this.scrollLength >= 0 ?\r\n            Math.min(this.maxHeight - this.__height, this._currentScroll - difference) :\r\n            Math.max(0, this._currentScroll - difference);\r\n\r\n        this.scrollDuration += Math.abs(difference);\r\n        const distanceToTraverse = Math.abs(this._currentScroll - this.scrollToDest);\r\n        const maxTime = distanceToTraverse > 1000 ? 4000 : distanceToTraverse > 700 ? 3000 : distanceToTraverse > 500  ? 2000 : distanceToTraverse > 200 ? 1000 : 400;\r\n\r\n        this.scrollDuration = Math.min(this.scrollDuration, maxTime);\r\n        this.animationFrame = this.animateScroll(Date.now());\r\n    }\r\n\r\n    private applySwipe(power) {\r\n        if(Math.abs(power) < 1) return;\r\n\r\n        if(this.animationFrame) {\r\n            cancelAnimationFrame(this.animationFrame);\r\n            this.animationFrame = null;\r\n        }\r\n\r\n        this.tweenFunc = tweenFunctions.easeOutCubic;\r\n        this.lastScroll = this._currentScroll;\r\n        this.scrollCurrentDur = 0;\r\n        const absPower = Math.abs(power);\r\n        const multiplier = absPower < 10 ? 25 : absPower < 25 ? 30 : absPower < 30 ? 35 : absPower < 35 ? 55 : absPower < 40 ? 60 : absPower < 60 ? 65 : 80;\r\n        const diff = power * multiplier;\r\n        // scroll height is less than total height.. no need to scroll anything.\r\n        if(this.maxHeight <= this.__height) {\r\n            return;\r\n        }\r\n\r\n        this.scrollToDest = power >= 0 ?\r\n            Math.min( this.maxHeight - this.__height, this._currentScroll + diff) :\r\n            Math.max(0, this._currentScroll + diff);\r\n\r\n     //   if(this.scrollToDest === this.maxHeight - this.__height || this.scrollToDest === 0) {}\r\n\r\n        const distanceToTraverse = Math.abs(this._currentScroll - this.scrollToDest);\r\n        let maxTime;\r\n        if(this.scrollToDest === 0 || this.scrollToDest === this.maxHeight - this.__height + 0) {\r\n            maxTime = distanceToTraverse > 1000 ? 1000 : distanceToTraverse > 500 ? 500 : 200;\r\n        } else {\r\n            maxTime = distanceToTraverse > 2700 ? 4000 : distanceToTraverse > 2300 ? 3500 : distanceToTraverse > 1500 ? 3000 : distanceToTraverse > 1000 ? 2700 : distanceToTraverse > 700 ? 2300 : distanceToTraverse > 500 ? 2000 : distanceToTraverse > 300 ? 1500 : distanceToTraverse > 100 ? 1000 : 700;\r\n        }\r\n        this.scrollDuration = Math.min(maxTime);\r\n        this.animationFrame = this.animateScroll(Date.now());\r\n    }\r\n\r\n    set currentScroll(value) {\r\n        if(value < 0) {\r\n            value = 0;\r\n        } else if (value > this.maxHeight - this.__height) {\r\n            value = this.maxHeight - this.__height\r\n        }\r\n        this._currentScroll = value;\r\n        if (this.scrollBar && this._needsUpdateScoller) {\r\n            this.scrollBar.setScrollPercent(this.scrollPercent);\r\n        }\r\n        this.adjustOptions();\r\n    }\r\n\r\n    get currentScroll() {\r\n        return this._currentScroll;\r\n    }\r\n\r\n    public addScrollItems(containers: Array<PIXI.Container | PIXI.Sprite | PIXI.Graphics | PIXI.Text>) {\r\n        containers.forEach(c => {\r\n            c['just_added'] = true;\r\n            c.visible = true;\r\n            this.po.addChild(c);\r\n            if(c.interactive) {\r\n                c.hitArea = new PIXI.Rectangle(0, 0, c.width, c.height);\r\n            }\r\n            this.options.push(c);\r\n        });\r\n        this.recalculateHeight();\r\n        this.repositionOptions();\r\n        this.adjustVisibility(null, true);\r\n        this.redraw();\r\n    }\r\n    public addScrollItem(container: PIXI.Container | PIXI.Sprite | PIXI.Graphics | PIXI.Text) {\r\n        this.addScrollItems([container])\r\n    }\r\n\r\n    private recalculateHeight() {\r\n        let height = 0;\r\n        this.options.forEach(c => {\r\n            height += c.height;\r\n        });\r\n        this.maxHeight = height;\r\n    }\r\n\r\n    public spliceScrollItems(fromIndex, toIndex?, destroyItem=true) {\r\n        toIndex = toIndex >= 0 ? toIndex : this.options.length;\r\n        const indexArray = [];\r\n        for(let i = fromIndex; i < toIndex; i++) {\r\n            indexArray.push(i);\r\n        }\r\n        this.removeScrollItems(indexArray, destroyItem);\r\n    }\r\n\r\n    public removeScrollItems(indexOrContainer, destroyItem=true) {\r\n        if(!(Array.isArray(indexOrContainer))) {\r\n            indexOrContainer = [indexOrContainer]\r\n        }\r\n\r\n        const indexesToRemove = [];\r\n        indexOrContainer.forEach(i => {\r\n            let container;\r\n            if (!isNaN(i)) {\r\n                container = this.options[i];\r\n            } else {\r\n                container = indexOrContainer;\r\n            }\r\n            const foundOption = this.options.find(o => o === container);\r\n            if (foundOption) {\r\n                indexesToRemove.push(this.options.indexOf(foundOption));\r\n\r\n                if(foundOption && foundOption.parent === this.po) {\r\n                    this.po.removeChild(foundOption);\r\n                }\r\n                if(destroyItem) {\r\n                    foundOption.destroy({ children: true })\r\n                }\r\n            }\r\n        });\r\n        if(indexesToRemove.length) {\r\n            this.options = this.options.filter((o, i) => {\r\n                return !(indexesToRemove.includes(i));\r\n            });\r\n\r\n            if(this._currentScroll > this.maxHeight - this.__height) {\r\n                this.currentScroll = this.maxHeight - this.__height;\r\n            }\r\n            this.recalculateHeight();\r\n            this.repositionOptions();\r\n            this.adjustVisibility(null, true);\r\n            this.redraw();\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    private findOptionAtPoint(p) : PIXI.Container {\r\n        for(let i = this.startingVisibleChildIndex; i <= this.endingVisibleChildIndex; i++) {\r\n            const opt : PIXI.Container = this.options[i];\r\n            if(opt.visible && this._containsPoint(opt, p)) {\r\n                return opt;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    private recurseChildren(el, point, foundChildren) {\r\n        if(el.interactive || el.interactiveChildren) {\r\n            if(this._containsPoint(el, point)) {\r\n                if(el.interactive) {\r\n                    foundChildren.push(el);\r\n                }\r\n                if(el.interactiveChildren && el.children) {\r\n                    el.children.forEach(child => {\r\n                        this.recurseChildren(child, point, foundChildren);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return foundChildren;\r\n    }\r\n}\r\n","/*\r\nEasing Types extracted from tween.js\r\nhttps://github.com/tweenjs/tween.js\r\n\r\nAvailable functions can be referenced by name, or by name.In, name.Out, and name.InOut\r\n\r\nlinear, quadratic, cubic, quartic, quintic, sinusoidal, exponential, circular, elastic, back, bounce\r\n*/\r\n\r\nexport interface EasingFunction {\r\n  (k: number): number;\r\n  In?: (k: number) => number;\r\n  Out?: (k: number) => number;\r\n  InOut?: (k: number) => number;\r\n}\r\n\r\nexport interface EasingFunctions {\r\n  [key: string]: EasingFunction;\r\n}\r\n\r\nconst Bounce = {\r\n  In: function(k: number): number {\r\n    return 1 - Bounce.Out(1 - k);\r\n  },\r\n  Out: function(k: number): number {\r\n    if (k < (1 / 2.75)) {\r\n      return 7.5625 * k * k;\r\n    } else if (k < (2 / 2.75)) {\r\n      return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\r\n    } else if (k < (2.5 / 2.75)) {\r\n      return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\r\n    } else {\r\n      return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\r\n    }\r\n  },\r\n  InOut: function(k: number): number {\r\n    if (k < 0.5) {\r\n      return Bounce.In(k * 2) * 0.5;\r\n    }\r\n    return Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\r\n  }\r\n};\r\n\r\nconst easingFunctions: Record<string, Record<string, EasingFunction>> = {\r\n  linear: {\r\n    In: function(k: number): number {\r\n      return k;\r\n    },\r\n    Out: function(k: number): number {\r\n      return k;\r\n    },\r\n    InOut: function(k: number): number {\r\n      return k;\r\n    }\r\n  },\r\n  quadratic: {\r\n    In: function(k: number): number {\r\n      return k * k;\r\n    },\r\n    Out: function(k: number): number {\r\n      return k * (2 - k);\r\n    },\r\n    InOut: function(k: number): number {\r\n      if ((k *= 2) < 1) {\r\n        return 0.5 * k * k;\r\n      }\r\n      return -0.5 * (--k * (k - 2) - 1);\r\n    }\r\n  },\r\n  cubic: {\r\n    In: function(k: number): number {\r\n      return k * k * k;\r\n    },\r\n    Out: function(k: number): number {\r\n      return --k * k * k + 1;\r\n    },\r\n    InOut: function(k: number): number {\r\n      if ((k *= 2) < 1) {\r\n        return 0.5 * k * k * k;\r\n      }\r\n      return 0.5 * ((k -= 2) * k * k + 2);\r\n    }\r\n  },\r\n  quartic: {\r\n    In: function(k: number): number {\r\n      return k * k * k * k;\r\n    },\r\n    Out: function(k: number): number {\r\n      return 1 - (--k * k * k * k);\r\n    },\r\n    InOut: function(k: number): number {\r\n      if ((k *= 2) < 1) {\r\n        return 0.5 * k * k * k * k;\r\n      }\r\n      return -0.5 * ((k -= 2) * k * k * k - 2);\r\n    }\r\n  },\r\n  quintic: {\r\n    In: function(k: number): number {\r\n      return k * k * k * k * k;\r\n    },\r\n    Out: function(k: number): number {\r\n      return --k * k * k * k * k + 1;\r\n    },\r\n    InOut: function(k: number): number {\r\n      if ((k *= 2) < 1) {\r\n        return 0.5 * k * k * k * k * k;\r\n      }\r\n      return 0.5 * ((k -= 2) * k * k * k * k + 2);\r\n    }\r\n  },\r\n  sinusoidal: {\r\n    In: function(k: number): number {\r\n      return 1 - Math.cos(k * Math.PI / 2);\r\n    },\r\n    Out: function(k: number): number {\r\n      return Math.sin(k * Math.PI / 2);\r\n    },\r\n    InOut: function(k: number): number {\r\n      return 0.5 * (1 - Math.cos(Math.PI * k));\r\n    }\r\n  },\r\n  exponential: {\r\n    In: function(k: number): number {\r\n      return k === 0 ? 0 : Math.pow(1024, k - 1);\r\n    },\r\n    Out: function(k: number): number {\r\n      return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\r\n    },\r\n    InOut: function(k: number): number {\r\n      if (k === 0) {\r\n        return 0;\r\n      }\r\n      if (k === 1) {\r\n        return 1;\r\n      }\r\n      if ((k *= 2) < 1) {\r\n        return 0.5 * Math.pow(1024, k - 1);\r\n      }\r\n      return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\r\n    }\r\n  },\r\n  circular: {\r\n    In: function(k: number): number {\r\n      return 1 - Math.sqrt(1 - k * k);\r\n    },\r\n    Out: function(k: number): number {\r\n      return Math.sqrt(1 - (--k * k));\r\n    },\r\n    InOut: function(k: number): number {\r\n      if ((k *= 2) < 1) {\r\n        return -0.5 * (Math.sqrt(1 - k * k) - 1);\r\n      }\r\n      return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\r\n    }\r\n  },\r\n  elastic: {\r\n    In: function(k: number): number {\r\n      if (k === 0) {\r\n        return 0;\r\n      }\r\n      if (k === 1) {\r\n        return 1;\r\n      }\r\n      return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n    },\r\n    Out: function(k: number): number {\r\n      if (k === 0) {\r\n        return 0;\r\n      }\r\n      if (k === 1) {\r\n        return 1;\r\n      }\r\n      return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\r\n    },\r\n    InOut: function(k: number): number {\r\n      if (k === 0) {\r\n        return 0;\r\n      }\r\n      if (k === 1) {\r\n        return 1;\r\n      }\r\n      k *= 2;\r\n      if (k < 1) {\r\n        return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n      }\r\n      return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\r\n    }\r\n  },\r\n  back: {\r\n    In: function(k: number): number {\r\n      const s = 1.70158;\r\n      return k * k * ((s + 1) * k - s);\r\n    },\r\n    Out: function(k: number): number {\r\n      const s = 1.70158;\r\n      return --k * k * ((s + 1) * k + s) + 1;\r\n    },\r\n    InOut: function(k: number): number {\r\n      const s = 1.70158 * 1.525;\r\n      if ((k *= 2) < 1) {\r\n        return 0.5 * (k * k * ((s + 1) * k - s));\r\n      }\r\n      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\r\n    }\r\n  },\r\n  bounce: Bounce\r\n};\r\n\r\n// Apply shorthand to each easing function\r\nconst processedEasingFunctions: EasingFunctions = {};\r\n\r\nObject.keys(easingFunctions).forEach(key => {\r\n  const easingGroup = easingFunctions[key];\r\n  const mainFunction = easingGroup.InOut;\r\n  \r\n  // Add In, Out, InOut properties to the main function\r\n  mainFunction.In = easingGroup.In;\r\n  mainFunction.Out = easingGroup.Out;\r\n  mainFunction.InOut = easingGroup.InOut;\r\n  \r\n  // Add the main function to the processed functions\r\n  processedEasingFunctions[key] = mainFunction;\r\n});\r\n\r\nexport default processedEasingFunctions;","import easingFunctions, { EasingFunction } from './easingFunctions';\r\n\r\n/**\r\n * Parse easing name into array\r\n * example: `cubic` becomes ['cubic']\r\n * example: `cubicInOut' becomes ['cubic', 'InOut']\r\n */\r\nfunction parseName(name: string): string[] {\r\n  const tests = [/InOut$/, /In$/, /Out$/];\r\n  \r\n  for (const regex of tests) {\r\n    const match = regex.exec(name);\r\n    if (match) {\r\n      return [name.substr(0, match.index), match[0]];\r\n    }\r\n  }\r\n  \r\n  return [name];\r\n}\r\n\r\n/**\r\n * Return easing function given a name like 'cubicInOut'\r\n */\r\nfunction getEasing(name: string): EasingFunction {\r\n  const path = parseName(name);\r\n  \r\n  if (!easingFunctions[path[0]]) {\r\n    // Return linear function as default if easing not found\r\n    return easingFunctions.linear;\r\n  }\r\n  \r\n  if (path.length === 1) {\r\n    return easingFunctions[path[0]];\r\n  }\r\n  \r\n  const easingGroup = easingFunctions[path[0]];\r\n  return easingGroup[path[1] as keyof EasingFunction] || easingGroup;\r\n}\r\n\r\nexport default getEasing;","export class Color {\r\n  private r: number = 0;\r\n  private g: number = 0;\r\n  private b: number = 0;\r\n  private a: number = 1;\r\n\r\n  constructor(value?: string | number | Color | number[]) {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      this.parseColorString(value);\r\n    } else if (typeof value === 'number') {\r\n      this.parseHex(value);\r\n    } else if (Array.isArray(value)) {\r\n      this.setRgb(value);\r\n    } else if (value instanceof Color) {\r\n      this.r = value.r;\r\n      this.g = value.g;\r\n      this.b = value.b;\r\n      this.a = value.a;\r\n    }\r\n  }\r\n\r\n  private parseColorString(color: string): void {\r\n    // Handle hex\r\n    if (color.startsWith('#')) {\r\n      this.parseHexString(color);\r\n      return;\r\n    }\r\n\r\n    // Handle rgb/rgba\r\n    if (color.startsWith('rgb')) {\r\n      this.parseRgbString(color);\r\n      return;\r\n    }\r\n\r\n    // Default to black if format not recognized\r\n    this.r = 0;\r\n    this.g = 0;\r\n    this.b = 0;\r\n    this.a = 1;\r\n  }\r\n\r\n  private parseHexString(hex: string): void {\r\n    // Remove the hash\r\n    hex = hex.replace('#', '');\r\n\r\n    // Handle shorthand hex (#RGB)\r\n    if (hex.length === 3) {\r\n      this.r = parseInt(hex[0] + hex[0], 16);\r\n      this.g = parseInt(hex[1] + hex[1], 16);\r\n      this.b = parseInt(hex[2] + hex[2], 16);\r\n      this.a = 1;\r\n      return;\r\n    }\r\n\r\n    // Handle standard hex (#RRGGBB)\r\n    if (hex.length === 6) {\r\n      this.r = parseInt(hex.substring(0, 2), 16);\r\n      this.g = parseInt(hex.substring(2, 4), 16);\r\n      this.b = parseInt(hex.substring(4, 6), 16);\r\n      this.a = 1;\r\n      return;\r\n    }\r\n\r\n    // Handle hex with alpha (#RRGGBBAA)\r\n    if (hex.length === 8) {\r\n      this.r = parseInt(hex.substring(0, 2), 16);\r\n      this.g = parseInt(hex.substring(2, 4), 16);\r\n      this.b = parseInt(hex.substring(4, 6), 16);\r\n      this.a = parseInt(hex.substring(6, 8), 16) / 255;\r\n      return;\r\n    }\r\n  }\r\n\r\n  private parseHex(hex: number): void {\r\n    this.r = (hex >> 16) & 0xFF;\r\n    this.g = (hex >> 8) & 0xFF;\r\n    this.b = hex & 0xFF;\r\n    this.a = 1;\r\n  }\r\n\r\n  private parseRgbString(rgb: string): void {\r\n    // Extract numbers from rgb(r, g, b) or rgba(r, g, b, a)\r\n    const values = rgb.match(/\\d+(\\.\\d+)?/g);\r\n    \r\n    if (values && values.length >= 3) {\r\n      this.r = parseInt(values[0], 10);\r\n      this.g = parseInt(values[1], 10);\r\n      this.b = parseInt(values[2], 10);\r\n      this.a = values.length >= 4 ? parseFloat(values[3]) : 1;\r\n    } else {\r\n      // Default to black if parsing fails\r\n      this.r = 0;\r\n      this.g = 0;\r\n      this.b = 0;\r\n      this.a = 1;\r\n    }\r\n  }\r\n\r\n  public rgb(): Color {\r\n    return this;\r\n  }\r\n\r\n  public array(): number[] {\r\n    return [this.r, this.g, this.b];\r\n  }\r\n\r\n  public hex(): string {\r\n    const r = this.padZero(this.r.toString(16));\r\n    const g = this.padZero(this.g.toString(16));\r\n    const b = this.padZero(this.b.toString(16));\r\n    return `#${r}${g}${b}`;\r\n  }\r\n  \r\n  private padZero(str: string): string {\r\n    return str.length === 1 ? '0' + str : str;\r\n  }\r\n\r\n  public toString(): string {\r\n    if (this.a < 1) {\r\n      return `rgba(${Math.round(this.r)}, ${Math.round(this.g)}, ${Math.round(this.b)}, ${this.a})`;\r\n    }\r\n    return `rgb(${Math.round(this.r)}, ${Math.round(this.g)}, ${Math.round(this.b)})`;\r\n  }\r\n\r\n  public setRgb(values: number[]): Color {\r\n    if (values.length >= 3) {\r\n      this.r = values[0];\r\n      this.g = values[1];\r\n      this.b = values[2];\r\n      if (values.length >= 4) {\r\n        this.a = values[3];\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // Static helper methods\r\n  public static rgb(values: number[]): Color {\r\n    return new Color(values);\r\n  }\r\n}\r\n\r\nexport default Color;","import getEasing from './easing';\r\nimport Color from './color';\r\n\r\ninterface TweenParams {\r\n  updater: (color: Color | Color[], progress: number) => void;\r\n  ender: (color: Color | Color[]) => void;\r\n  length: number;\r\n  startTime?: number;\r\n  easing: (k: number) => number;\r\n}\r\n\r\ninterface FrameResult {\r\n  frame: Color | Color[];\r\n  progress: number;\r\n}\r\n\r\nexport class ColorTween {\r\n  private startColors: Color[];\r\n  private endColors: Color[];\r\n  private params: TweenParams;\r\n  \r\n  constructor(startColorStrings: string[], endColorStrings: string[]) {\r\n    this.startColors = startColorStrings.map(color => new Color(color));\r\n    this.endColors = endColorStrings.map(color => new Color(color));\r\n    \r\n    this.params = {\r\n      updater: () => {},\r\n      ender: () => {},\r\n      length: 1000,\r\n      easing: getEasing('linear')\r\n    };\r\n  }\r\n\r\n  onUpdate(callback: (colors: Color | Color[], progress: number) => void): ColorTween {\r\n    this.params.updater = callback;\r\n    return this;\r\n  }\r\n\r\n  onEnd(callback: (colors: Color | Color[]) => void): ColorTween {\r\n    this.params.ender = callback;\r\n    return this;\r\n  }\r\n\r\n  duration(length: number): ColorTween {\r\n    this.params.length = length;\r\n    return this;\r\n  }\r\n\r\n  easing(name: string): ColorTween {\r\n    this.params.easing = getEasing(name);\r\n    return this;\r\n  }\r\n\r\n  start(callback?: () => void): ColorTween {\r\n    this.params.startTime = Date.now();\r\n    if (typeof callback === 'function') {\r\n      setTimeout(callback);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  update(): boolean {\r\n    if (this.params.startTime) {\r\n      const frame = this.renderFrame();\r\n      if (frame.progress >= 1) {\r\n        this.done();\r\n        return false;\r\n      } else {\r\n        this.params.updater(frame.frame, frame.progress);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private renderFrame(): FrameResult {\r\n    const pos = Date.now() - (this.params.startTime || 0);\r\n    const percent = pos / this.params.length;\r\n    const frames = this.endColors.map((endColor, i) => {\r\n      const startColor = this.startColors[i];\r\n      const startRGB = startColor.array();\r\n      const endRGB = endColor.array();\r\n      const frameColor = endRGB.map((val, j) => {\r\n        const interpolated = startRGB[j] + (val - startRGB[j]) * this.params.easing(percent);\r\n        return Math.round(interpolated);\r\n      });\r\n      return new Color(frameColor);\r\n    });\r\n    \r\n    return {\r\n      frame: frames.length === 1 ? frames[0] : frames,\r\n      progress: percent\r\n    };\r\n  }\r\n\r\n  private done(): ColorTween {\r\n    const endColorResult = this.endColors.length === 1 ? this.endColors[0] : this.endColors;\r\n    this.params.updater(endColorResult, 1);\r\n    this.stop();\r\n    return this;\r\n  }\r\n\r\n  stop(): ColorTween {\r\n    const endColorResult = this.endColors.length === 1 ? this.endColors[0] : this.endColors;\r\n    this.params.startTime = undefined;\r\n    this.params.ender(endColorResult);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ColorTween;","export const GLOBAL_PIXI_DTA_PROPERTY_KEY = \"__pixi-dom-dynamic-texture-atlas\";\r\nexport type PixiRectLike = { x: number, y: number, width: number, height: number, parent?: { width: number, height: number } }\r\n\r\ntype MeasurementUnit = 'px' | '%' | 'percent' | 'pixel' | 'pixels'\r\n\r\nexport type ParsedMeasurement = {\r\n  valid: boolean,\r\n  error?: string,\r\n  value?: number,\r\n  type?: 'percent' | 'pixel'\r\n}\r\n\r\nexport type ValidMeasurement = {\r\n    value: number,\r\n    type: MeasurementUnit\r\n} | number | string\r\n\r\nexport type FlexOptions = {\r\n    flexDirection?: FlexDirection,\r\n    flexWrap?: FlexWrap,\r\n    justifyContent?: JustifyContent,\r\n}\r\n\r\nexport enum JustifyContent {\r\n    flexStart = \"flex-start\",\r\n    flexEnd = \"flex-end\",\r\n    center = \"center\",\r\n    spaceBetween = \"spaceBetween\",\r\n    spaceAround = \"spaceAround\",\r\n    spaceEvenly = \"spaceEvenly\",\r\n}\r\n\r\nexport enum FlexDirection {\r\n    row = \"row\",\r\n    row_reverse = \"row-reverse\",\r\n    column = \"column\",\r\n    column_reverse = \"column-reverse\"\r\n}\r\n\r\nexport enum FlexWrap {\r\n    nowrap = \"nowrap\",\r\n    wrap = \"wrap\",\r\n    wrap_reverse = \"wrap-reverse\"\r\n}\r\n\r\nexport type InputStyleOptions = {\r\n    width?: ValidMeasurement,\r\n    height?: ValidMeasurement,\r\n    cursorHeight: ValidMeasurement,\r\n    cursorWidth: number,\r\n    borderWidth?: number,\r\n    borderColor?: number,\r\n    fontColor: number,\r\n    highlightedFontColor: number,\r\n    cursorColor: number,\r\n    backgroundColor: number,\r\n    highlightedBackgroundColor: number,\r\n    borderOpacity: number,\r\n    xPadding: number,\r\n    yPadding: number,\r\n}\r\n\r\nexport type InputStyleOptionsParams = {\r\n    width?: number | string,\r\n    height?: number | string,\r\n    borderWidth?: number,\r\n    borderColor?: number,\r\n    fontColor?: number,\r\n    highlightedFontColor?: number,\r\n    cursorColor?: number,\r\n    cursorHeight?: number | string,\r\n    cursorWidth: number,\r\n    backgroundColor?: number,\r\n    highlightedBackgroundColor?: number,\r\n    borderOpacity?: number,\r\n    xPadding?: number,\r\n    yPadding?: number,\r\n}\r\n\r\nexport type LabelOptions = {\r\n    onLabel: string,\r\n    onColor: number,\r\n    offLabel: string,\r\n    offColor: number,\r\n    fontName: string,\r\n}\r\n\r\nexport enum AnimationType {\r\n    LINEAR = 'linear',\r\n    QUADRATIC = 'quadtratic',\r\n    CUBIC = 'cubic',\r\n    QUARTIC = \"quartic\",\r\n    QUINTIC = \"quintic\",\r\n    SINUSOIDAL = \"sinusoidal\",\r\n    EXPONENTIAL = \"exponential\",\r\n    CIRCULAR = \"circular\",\r\n    ELASTIC = \"elastic\",\r\n    BACK = \"back\",\r\n}\r\n\r\nexport type AnimationOptions = {\r\n    type: AnimationType,\r\n    duration: number,\r\n    exclude?: Array<string>\r\n}\r\n\r\nexport enum ToggleAnimationExclusions {\r\n    background = 'background',\r\n    circle_color = 'circle_color',\r\n    circle_position = 'circle_position',\r\n    label = 'label',\r\n}\r\n\r\nexport type OutlineOptions = {\r\n    width: number,\r\n    color: number,\r\n}\r\n\r\nexport type ToggleOptions = {\r\n    width: number,\r\n    height: number,\r\n    borderRadius: number,\r\n    onCircleColor: number,\r\n    offCircleColor: number,\r\n    onBackgroundColor: number,\r\n    offBackgroundColor: number,\r\n    onToggleColor: number,\r\n    offToggleColor: number,\r\n    backgroundOutline?: OutlineOptions,\r\n    labelOptions?: LabelOptions,\r\n    animationOptions?: AnimationOptions,\r\n    circlePadding?: number,\r\n}\r\n","import { string2hex } from \"../utils\";\r\n\r\nimport { ColorTween } from '../tween/colorTween';\r\n\r\nconst DEFAULT_CIRCLE_PADDING = 2;\r\n\r\nimport { ToggleOptions, AnimationType, OutlineOptions, LabelOptions, AnimationOptions, ToggleAnimationExclusions } from \"../types\";\r\n\r\nexport class Toggle extends PIXI.Container {\r\n    private _toggled: boolean = true;\r\n    private backgroundGraphic: PIXI.Graphics;\r\n    private circleGraphic: PIXI.Graphics;\r\n    private options: ToggleOptions;\r\n    private circleRadius: number;\r\n    private computedBorderRadius: number;\r\n\r\n    private onText: PIXI.extras.BitmapText;\r\n    private offText: PIXI.extras.BitmapText;\r\n    private usingLabels: boolean = false;\r\n    private updateToggle: Function;\r\n\r\n    private _activeBackgroundColor;\r\n    private _inactiveBackgroundColor;\r\n    private _activeCircleColor;\r\n    private _inactiveCircleColor;\r\n    private _travelToX;\r\n\r\n    private tween: any;\r\n\r\n    private backgroundColorsArrayIndex: number = null;\r\n    private circleColorsArrayIndex: number = null;\r\n\r\n    private toggleCircleTravelDistance: number = 0;\r\n    private circlePadding: number = DEFAULT_CIRCLE_PADDING;\r\n\r\n    constructor(options: ToggleOptions, isToggled?: boolean) {\r\n        super();\r\n        this.circlePadding = options.circlePadding ?? DEFAULT_CIRCLE_PADDING;\r\n        this.options = options;\r\n        this.backgroundGraphic = new PIXI.Graphics();\r\n        const borderRadius = options.borderRadius ? options.borderRadius : 50;\r\n        options.borderRadius = borderRadius;\r\n        this.computedBorderRadius = (options.borderRadius / 100) * options.height;\r\n\r\n        this.backgroundGraphic.drawRoundedRect(0, 0, options.width, options.height, this.computedBorderRadius);\r\n        this.addChild(this.backgroundGraphic);\r\n\r\n        if(options.labelOptions) {\r\n            const { fontName, onLabel, offLabel, onColor, offColor } = options.labelOptions;\r\n            this.onText = new PIXI.extras.BitmapText(onLabel, { font: fontName, align: \"left\" });\r\n            this.offText = new PIXI.extras.BitmapText(offLabel, { font: fontName, align: \"left\" });\r\n            this.addChild(this.onText);\r\n            this.addChild(this.offText);\r\n\r\n            this.onText.visible = false;\r\n            this.offText.visible = false;\r\n\r\n            const offXDiff = (options.width / 2) - this.offText.width;\r\n            if(offXDiff < 0) {throw new Error('Label for off text was too long')}\r\n            this.offText.x = ((options.width / 2)  + offXDiff / 2) - this.circlePadding;\r\n            this.offText.tint = offColor;\r\n\r\n            const offYDiff = options.height - this.offText.height;\r\n            if(offYDiff < 0) { throw new Error('Label font is too large to fit within height of toggle, either increase height or use smaller font')};\r\n            this.offText.y = offYDiff / 2;\r\n\r\n            const onXDiff = (options.width / 2) - this.onText.width;\r\n            if(onXDiff < 0) {throw new Error('Label for on text was too long')}\r\n            this.onText.x = this.circlePadding + onXDiff / 2;\r\n            this.onText.tint = onColor;\r\n\r\n            const onYDiff = options.height - this.onText.height;\r\n            if(onYDiff < 0) { throw new Error('Label font is too large to fit within height of toggle, either increase height or use smaller font')};\r\n            this.onText.y = offYDiff / 2;\r\n            this.usingLabels = true;\r\n        }\r\n\r\n        this.circleRadius = (this.options.height / 2) - this.circlePadding;\r\n        this.circleGraphic = new PIXI.Graphics();\r\n        this.circleGraphic.drawCircle(0, 0, this.circleRadius);\r\n\r\n        this.circleGraphic.y = this.circlePadding;\r\n\r\n        this.addChild(this.circleGraphic);\r\n\r\n        this.toggleCircleTravelDistance = Math.abs((this.circlePadding) -  (this.options.width - this.circleGraphic.width - this.circlePadding));\r\n\r\n        this.interactive = true;\r\n        this.buttonMode = true;\r\n        this.on('pointerdown', () => {\r\n            this.toggled = !this.toggled;\r\n        });\r\n        this.updateToggle = this.staticToggleUpdate.bind(this);\r\n        this.toggled = !!isToggled;\r\n        this.updateToggle = options.animationOptions ? this.animatedToggleUpdate.bind(this) : this.staticToggleUpdate.bind(this);\r\n    }\r\n\r\n    get activeBackgroundColor() {\r\n        return this.toggled ? this.options.onBackgroundColor : this.options.offBackgroundColor;\r\n    }\r\n\r\n    get inactiveBackgroundColor() {\r\n        return this.toggled ? this.options.offBackgroundColor : this.options.onBackgroundColor;\r\n    }\r\n\r\n    get activeCircleColor() {\r\n        return this.toggled ? this.options.onCircleColor : this.options.offCircleColor;\r\n    }\r\n\r\n    get inactiveCircleColor() {\r\n        return this.toggled ? this.options.offCircleColor : this.options.onCircleColor;\r\n    }\r\n\r\n    get activeTextLabel() {\r\n        return this.toggled ? this.onText : this.offText;\r\n    }\r\n\r\n    get inactiveTextLabel() {\r\n        return this.toggled ? this.offText : this.onText;\r\n    }\r\n\r\n    get travelToX() {\r\n        return this.toggled ? this.circlePadding : this.options.width - this.circleGraphic.width - this.circlePadding;\r\n    }\r\n\r\n    set toggled(val) {\r\n        this.emit('toggle-change', val);\r\n        this._toggled = val;\r\n\r\n        this.updateToggle();\r\n\r\n        //TODO: tween colors in interval with a delta\r\n    }\r\n\r\n    get toggled() {\r\n        return this._toggled;\r\n    }\r\n\r\n    public onToggle(callback) {\r\n        this.on('toggle-change', callback);\r\n    }\r\n\r\n    private animateToggle(delta) {\r\n        if(this.tween.update()) {\r\n            requestAnimationFrame(this.animateToggle.bind(this));\r\n        }\r\n    }\r\n\r\n    private midAnimationToggleUpdate(colors, progress) {\r\n        const traveledDistance = this.toggleCircleTravelDistance * progress;\r\n        const { exclude } = this.options.animationOptions;\r\n\r\n        if(this.usingLabels && (!exclude || !exclude.includes(ToggleAnimationExclusions.label))) {\r\n            this.activeTextLabel.visible = true;\r\n            this.inactiveTextLabel.visible = true;\r\n            this.inactiveTextLabel.alpha = 1 - progress;\r\n            this.activeTextLabel.alpha = progress;\r\n        }\r\n\r\n        if (this.backgroundColorsArrayIndex !== null) {\r\n            this.backgroundGraphic.clear();\r\n            if (this.options.hasOwnProperty('backgroundOutline')) {\r\n                const {width, color} = this.options.backgroundOutline;\r\n                this.backgroundGraphic.lineStyle(width, color);\r\n            }\r\n            this.backgroundGraphic.beginFill(string2hex(colors[this.backgroundColorsArrayIndex].hex()));\r\n            this.backgroundGraphic.drawRoundedRect(0, 0, this.options.width, this.options.height, this.computedBorderRadius);\r\n            this.backgroundGraphic.endFill();\r\n        }\r\n\r\n        if (!exclude || !exclude.includes(ToggleAnimationExclusions.circle_position)) {\r\n            if (this.toggled) {\r\n                this.circleGraphic.x = this.travelToX + traveledDistance;\r\n            } else {\r\n                this.circleGraphic.x = this.travelToX - traveledDistance;\r\n            }\r\n        };\r\n\r\n        if (this.circleColorsArrayIndex !== null) {\r\n            this.circleGraphic.clear();\r\n            this.circleGraphic.beginFill(string2hex(colors[this.circleColorsArrayIndex].hex()));\r\n            this.circleGraphic.drawCircle(this.circleRadius, this.circleRadius, this.circleRadius);\r\n            this.circleGraphic.endFill();\r\n        };\r\n    }\r\n\r\n    private animatedToggleUpdate() {\r\n        const activeColorsArray = [];\r\n        const inactiveColorsArray = [];\r\n        const { exclude } = this.options.animationOptions;\r\n\r\n        if(!exclude || !exclude.includes(ToggleAnimationExclusions.background)) {\r\n            activeColorsArray.push(PIXI.utils.hex2string(this.activeBackgroundColor));\r\n            inactiveColorsArray.push(PIXI.utils.hex2string(this.inactiveBackgroundColor));\r\n            this.backgroundColorsArrayIndex = 0;\r\n        }\r\n        if(!exclude || !exclude.includes(ToggleAnimationExclusions.circle_color)) {\r\n            activeColorsArray.push(PIXI.utils.hex2string(this.activeCircleColor));\r\n            inactiveColorsArray.push(PIXI.utils.hex2string(this.inactiveCircleColor));\r\n            this.circleColorsArrayIndex = activeColorsArray.length - 1;\r\n        }\r\n        this.tween = new ColorTween(inactiveColorsArray, activeColorsArray)\r\n            .duration(this.options.animationOptions.duration)\r\n            .easing(this.options.animationOptions.type)\r\n            .onUpdate(this.midAnimationToggleUpdate.bind(this))\r\n            .onEnd(this.staticToggleUpdate.bind(this))\r\n            .start(this.animateToggle.bind(this));\r\n    }\r\n\r\n    private staticToggleUpdate() {\r\n        this.backgroundGraphic.clear();\r\n        if(this.options.hasOwnProperty('backgroundOutline')) {\r\n            const { width, color } = this.options.backgroundOutline;\r\n            this.backgroundGraphic.lineStyle(width, color);\r\n        }\r\n        // when its to the right were toggled/on so use options/width to calculate for now\\\r\n        let xPosition;\r\n        let circleColor;\r\n        let backgroundColor;\r\n\r\n        if(this._toggled) {\r\n            backgroundColor = this.options.onBackgroundColor;\r\n            xPosition = this.options.width - this.circleGraphic.width - this.circlePadding;\r\n            circleColor =  this.options.onCircleColor;\r\n            this._showOnText();\r\n        } else {\r\n            backgroundColor =  this.options.offBackgroundColor;\r\n            xPosition =  0 + this.circlePadding;\r\n            circleColor = this.options.offCircleColor;\r\n            this._showOffText();\r\n        }\r\n\r\n        this.backgroundGraphic.beginFill(backgroundColor);\r\n        this.backgroundGraphic.drawRoundedRect(0, 0, this.options.width, this.options.height, this.computedBorderRadius);\r\n        this.backgroundGraphic.endFill();\r\n\r\n        this.circleGraphic.clear();\r\n        this.circleGraphic.beginFill(circleColor);\r\n        this.circleGraphic.drawCircle(this.circleRadius, this.circleRadius, this.circleRadius);\r\n        this.circleGraphic.endFill();\r\n        this.circleGraphic.x = xPosition;\r\n    }\r\n\r\n    private _showOnText() {\r\n        if(this.usingLabels) {\r\n            this.onText.visible = true;\r\n            this.offText.visible = false;\r\n        }\r\n    }\r\n\r\n    private _showOffText() {\r\n        if(this.usingLabels) {\r\n            this.onText.visible = false;\r\n            this.offText.visible = true;\r\n        }\r\n    }\r\n}","import { ValidMeasurement } from \"../types\";\r\nimport {parseLengthMeasurements} from \"../utils\";\r\nimport {StyleOptionsParams} from \"./TextInput/TextField\";\r\n\r\nimport { PixiElement } from \"../Element\";\r\n\r\nexport interface ButtonStyleStateOptions {\r\n    width?: number,\r\n    height?: number,\r\n    textColor?: number,\r\n    backgroundTexture?: PIXI.Texture,\r\n    backgroundOpacity?: number,\r\n    backgroundColor?: number,\r\n    borderColor?: number,\r\n    borderWidth?: number,\r\n    borderOpacity?: number,\r\n    borderRadius?: number,\r\n}\r\n\r\nexport interface ButtonStyleOptions {\r\n    useBitmapText: boolean,\r\n    fontSize?: number,\r\n    defaultStyle: ButtonStyleStateOptions,\r\n    hoverStyle?: ButtonStyleStateOptions,\r\n    pressedStyle?: ButtonStyleStateOptions,\r\n    font: string,\r\n}\r\n\r\nconst stateStylesToValidate = [\"hoverStyle\", \"defaultStyle\", \"pressedStyle\"];\r\n\r\nenum BtnState {\r\n    NONE,\r\n    HOVER,\r\n    PRESSED,\r\n}\r\n\r\nexport class Button extends PixiElement {\r\n    private _text: string;\r\n    private bitmapTxtSprite: PIXI.extras.BitmapText;\r\n    private txtSprite: PIXI.Text;\r\n    private bgGraphic: PIXI.Graphics;\r\n    private bgSprite: PIXI.Sprite;\r\n    private styleOptions: ButtonStyleOptions = { defaultStyle: {}, font: '', useBitmapText: true };\r\n    private _currentStyleState: ButtonStyleStateOptions;\r\n    private _btnState: BtnState = BtnState.NONE;\r\n    constructor(text: string, styleOptions: ButtonStyleOptions) {\r\n        super();\r\n        this._text = text;\r\n        this.interactive = true;\r\n        this.buttonMode = true;\r\n        this.on('pointerdown', () => this.btnState = BtnState.PRESSED);\r\n        this.on('pointerup', () => this.btnState = BtnState.NONE);\r\n        this.on('pointerupoutside', () => this.btnState = BtnState.NONE);\r\n        this.on('pointerover', () => this.btnState = BtnState.HOVER);\r\n        this.on('pointerout', () => this.btnState = BtnState.NONE);\r\n        this.updateStyle(styleOptions);\r\n    }\r\n\r\n    set btnState(newState) {\r\n        if(newState !== this._btnState) {\r\n            this._btnState = newState;\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    set text(value) {\r\n        this._text = value;\r\n        this.redrawText();\r\n    }\r\n\r\n    public updateStyle(styleOptions: ButtonStyleOptions) {\r\n        Object.keys(styleOptions).forEach(key => {\r\n            this.styleOptions[key] = styleOptions[key];\r\n        });\r\n        this.styleOptions.useBitmapText = this.styleOptions.useBitmapText ?? false;\r\n        this.redraw();\r\n    }\r\n\r\n    public redraw() {\r\n        this.clear();\r\n        this.redrawBg();\r\n        this.redrawText();\r\n    }\r\n\r\n\r\n    public redrawText() {\r\n        let sprite;\r\n        if(this.styleOptions.useBitmapText) {\r\n            if(!this.bitmapTxtSprite) {\r\n                this.bitmapTxtSprite = new PIXI.extras.BitmapText('', {font: this.styleOptions.font, align: 'center'});\r\n            }\r\n            if(this.txtSprite) {\r\n                this.txtSprite.destroy();\r\n                this.txtSprite = null;\r\n            }\r\n            this.bitmapTxtSprite.maxWidth = this.width;\r\n            sprite = this.bitmapTxtSprite;\r\n        } else {\r\n            if(!this.txtSprite) {\r\n                this.txtSprite = new PIXI.Text('', {fontFamily: this.styleOptions.font, align: 'center'});\r\n            }\r\n            if(this.styleOptions.fontSize) {\r\n                this.txtSprite.style.fontSize = this.styleOptions.fontSize;\r\n            }\r\n            if(this.bitmapTxtSprite) {\r\n                this.bitmapTxtSprite.destroy({ children: true });\r\n                this.bitmapTxtSprite = null;\r\n            }\r\n            sprite = this.txtSprite;\r\n        }\r\n        if(this.currentStyleState.textColor || this.currentStyleState.textColor == 0) {\r\n            if(this.styleOptions.useBitmapText) {\r\n                this.bitmapTxtSprite.tint = this.currentStyleState.textColor;\r\n            } else {\r\n                this.txtSprite.style.fill = this.currentStyleState.textColor\r\n            }\r\n        }\r\n        if(!sprite.parent) {\r\n            this.addChild(sprite);\r\n        }\r\n        sprite.text = this._text;\r\n        sprite.x = this.currentStyleState.width / 2 - sprite.width / 2;\r\n        sprite.y = this.currentStyleState.height / 2 - sprite.height / 2;\r\n    }\r\n\r\n    get textSpriteUtilized() {\r\n        if(this.styleOptions.useBitmapText) return this.bitmapTxtSprite;\r\n        return this.txtSprite;\r\n    }\r\n\r\n    public redrawBg() {\r\n        let {backgroundColor, borderRadius, borderColor, borderWidth, width, height, backgroundTexture, backgroundOpacity, borderOpacity} = this.currentStyleState;\r\n        if(backgroundColor || backgroundColor == 0) {\r\n            if(!this.bgGraphic) {\r\n                this.bgGraphic = new PIXI.Graphics();\r\n            } else {\r\n                this.bgGraphic.clear();\r\n            }\r\n            if(!this.bgGraphic.parent) {\r\n                this.addChild(this.bgGraphic);\r\n            }\r\n            backgroundOpacity = backgroundOpacity || backgroundOpacity == 0 ? backgroundOpacity : 1;\r\n            this.bgGraphic.beginFill(backgroundColor, backgroundOpacity);\r\n            if(borderWidth) {\r\n                borderOpacity = borderOpacity || borderOpacity == 0 ? borderOpacity : 1;\r\n                this.bgGraphic.lineStyle(borderWidth, borderColor, borderOpacity);\r\n            }\r\n\r\n            if(borderRadius) {\r\n                const computedBorderRadius =  borderRadius / 100 * height;\r\n                this.bgGraphic.drawRoundedRect(0, 0, width, height, computedBorderRadius);\r\n            } else {\r\n                this.bgGraphic.drawRect(0, 0, width, height);\r\n            }\r\n            this.bgGraphic.endFill();\r\n        }\r\n\r\n        if(backgroundTexture) {\r\n            if(!this.bgSprite) {\r\n                this.bgSprite = new PIXI.Sprite();\r\n            }\r\n            if(!this.bgSprite.parent) {\r\n                this.addChild(this.bgGraphic);\r\n            }\r\n            this.bgSprite.texture = backgroundTexture;\r\n            this.bgSprite.x = width / 2 - this.bgSprite.x / 2;\r\n            this.bgSprite.y = height / 2 - this.bgSprite.y / 2;\r\n        }\r\n        this.hitArea = new PIXI.Rectangle(0, 0, width, height);\r\n    }\r\n\r\n    private clear() {\r\n        if(this.textSpriteUtilized) {\r\n            this.removeChild(this.textSpriteUtilized);\r\n            this.textSpriteUtilized.destroy({ children: true });\r\n            this.bitmapTxtSprite = null;\r\n            this.txtSprite = null;\r\n        }\r\n        if(this.bgGraphic) {\r\n            this.removeChild(this.bgGraphic);\r\n            this.bgGraphic.destroy();\r\n            this.bgGraphic = null;\r\n        }\r\n        if(this.bgSprite) {\r\n            this.removeChild(this.bgSprite);\r\n            this.bgSprite.destroy();\r\n            this.bgSprite = null;\r\n        }\r\n    }\r\n\r\n    get currentStyleState() {\r\n        switch(this._btnState) {\r\n            case BtnState.NONE:\r\n                return this.styleOptions.defaultStyle;\r\n                break;\r\n            case BtnState.HOVER:\r\n                return this.styleOptions.hoverStyle ? this.styleOptions.hoverStyle : this.styleOptions.defaultStyle;\r\n                break;\r\n            case BtnState.PRESSED:\r\n                // cascade to check if we have pressedStyle defined, if so use it, otherwise use hover, otherwise use default\r\n                return this.styleOptions.pressedStyle ? this.styleOptions.pressedStyle :\r\n                    this.styleOptions.hoverStyle ? this.styleOptions.hoverStyle :\r\n                        this.styleOptions.defaultStyle;\r\n                break;\r\n        }\r\n    }\r\n}","import { centerPixiObject } from \"../utils\";\r\n\r\ntype SliderOptions = {\r\n  startingValue: number;\r\n  minValue: number;\r\n  maxValue: number;\r\n  width: number;\r\n  height: number;\r\n  circleRadius: number;\r\n  preventScaleAdjustment?: boolean;\r\n  circleOpacity?: number;\r\n  down?: {\r\n      circleOpacity?: number;\r\n      circleRadius?: number;\r\n      circleColor?: number;\r\n      circleOutlineWidth?: number;\r\n      circleOutlineColor?: number;\r\n      circleOutlineOpacity?: number;\r\n  };\r\n  hover?: {\r\n      circleOpacity?: number;\r\n      circleRadius?: number;\r\n      circleColor?: number;\r\n      circleOutlineWidth?: number;\r\n      circleOutlineColor?: number;\r\n      circleOutlineOpacity?: number;\r\n  };\r\n  activeColor: number;\r\n  inactiveColor: number;\r\n  opacity?: number;\r\n  circleColor?: number;\r\n  circleOutlineWidth?: number;\r\n  circleOutlineColor?: number;\r\n  circleOutlineOpacity?: number;\r\n}\r\n\r\nclass Slider extends PIXI.Container {\r\n  isDragging: boolean;\r\n  isHovered: boolean;\r\n  curOutlineWidth: number;\r\n  lastX: number;\r\n  resolvedScale: { x: number; y: number; } | null;\r\n  options: SliderOptions;\r\n  currentValue: number;\r\n  backgroundGraphic: PIXI.Graphics;\r\n  circleRadius: number;\r\n  circleGraphic: PIXI.Graphics;\r\n\r\n  constructor(t: SliderOptions) { // You need to define the type of 't'\r\n      super();\r\n      this.isDragging = false;\r\n      this.isHovered = false;\r\n      this.curOutlineWidth = 0;\r\n      this.lastX = 0;\r\n      this.resolvedScale = null;\r\n      this.options = t;\r\n      this.currentValue = this.options.startingValue;\r\n\r\n      this.backgroundGraphic = new PIXI.Graphics();\r\n      super.addChild(this.backgroundGraphic);\r\n\r\n      this.circleRadius = this.options.circleRadius;\r\n\r\n      this.circleGraphic = new PIXI.Graphics();\r\n      this.circleGraphic.drawCircle(0, this.circleRadius, this.circleRadius);\r\n      this.circleGraphic.y = 0;\r\n      this.circleGraphic.buttonMode = true;\r\n      super.addChild(this.circleGraphic);\r\n      this.circleGraphic.interactive = true;\r\n\r\n      const e = (this.currentValue - this.options.minValue) / (this.options.maxValue - this.options.minValue);\r\n      this.circleGraphic.x = e * this.options.width;\r\n\r\n      this.redrawCircle();\r\n      this.redrawBar();\r\n\r\n      this.circleGraphic.on(\"pointerover\", t => {\r\n          this.isHovered = true;\r\n          this.redrawCircle();\r\n      });\r\n\r\n      this.circleGraphic.on(\"pointerout\", () => {\r\n          if (this.isHovered) {\r\n              this.isHovered = false;\r\n              if (!this.isDragging) {\r\n                  this.redrawCircle();\r\n              }\r\n          }\r\n      });\r\n\r\n      this.circleGraphic.on(\"pointerdown\", t => {\r\n          this.resolvedScale = null;\r\n          this.resolveScale();\r\n          this.isDragging = true;\r\n          this.lastX = t.data.global.x;\r\n          this.redrawCircle();\r\n      });\r\n\r\n      this.circleGraphic.on(\"pointercancel\", () => {\r\n          if (this.isDragging) {\r\n              this.resolvedScale = null;\r\n              this.isDragging = false;\r\n              this.redrawCircle();\r\n          }\r\n      });\r\n\r\n      this.circleGraphic.on(\"pointerup\", () => {\r\n          if (this.isDragging) {\r\n              this.resolvedScale = null;\r\n              this.isDragging = false;\r\n              this.redrawCircle();\r\n          }\r\n      });\r\n\r\n      this.circleGraphic.on(\"pointerupoutside\", () => {\r\n          if (this.isDragging) {\r\n              this.resolvedScale = null;\r\n              this.isDragging = false;\r\n              this.redrawCircle();\r\n          }\r\n      });\r\n\r\n      this.circleGraphic.on(\"pointermove\", t => {\r\n          if (!this.isDragging) return;\r\n\r\n          let e = t.data.global.x - this.lastX;\r\n          const i = this.options.preventScaleAdjustment ? 1 : this.resolveScale().x;\r\n\r\n          e *= i;\r\n\r\n          if ((e < 0 && t.data.global.x * i < this.x && this.circleGraphic.x === 0) || (e > 0 && t.data.global.x * i > this.options.width && this.circleGraphic.x === this.options.width)) return;\r\n\r\n          this.lastX = t.data.global.x;\r\n\r\n          const r = this.circleGraphic.x;\r\n          this.circleGraphic.x += e;\r\n          this.circleGraphic.x = Math.max(0, Math.min(this.circleGraphic.x, this.options.width));\r\n\r\n          if (this.circleGraphic.x - r) {\r\n              this.currentValue = this.calculateValue();\r\n              this.redrawBar();\r\n              super.emit(\"slider-change\", this.currentValue);\r\n          }\r\n      });\r\n  }\r\n\r\n  resolveScale() {\r\n      if (this.resolvedScale) return this.resolvedScale;\r\n\r\n      let t = 1 / this.scale.x, e = 1 / this.scale.y, i = this.parent;\r\n\r\n      for (; i;) {\r\n          t /= i.scale.x;\r\n          e /= i.scale.y;\r\n          i = i.parent;\r\n      }\r\n\r\n      return this.resolvedScale = { x: t, y: e };\r\n  }\r\n\r\n  calculateValue() {\r\n      const { maxValue, minValue, width } = this.options;\r\n      const s = this.circleGraphic.x / width;\r\n      return lerp(minValue, maxValue, s);\r\n  }\r\n\r\n  redrawCircle() {\r\n    this.circleGraphic.clear();\r\n    let circleOpacity = this.options.circleOpacity || 1;\r\n    if (this.isDragging && this.options.down?.circleOpacity) {\r\n        circleOpacity = this.options.down.circleOpacity;\r\n    } else if (this.isHovered && this.options.hover?.circleOpacity) {\r\n        circleOpacity = this.options.hover.circleOpacity;\r\n    }\r\n    let circleRadius = this.options.circleRadius;\r\n    if (this.isDragging && this.options.down?.circleRadius) {\r\n        circleRadius = this.options.down.circleRadius;\r\n    } else if (this.isHovered && this.options.hover?.circleRadius) {\r\n        circleRadius = this.options.hover.circleRadius;\r\n    }\r\n    let circleColor = this.options.circleColor;\r\n    if (this.isDragging && this.options.down?.circleColor) {\r\n        circleColor = this.options.down.circleColor;\r\n    } else if (this.isHovered && this.options.hover?.circleColor) {\r\n        circleColor = this.options.hover.circleColor;\r\n    }\r\n    let circleOutlineWidth = 0;\r\n    if (this.isDragging && this.options.down?.circleOutlineWidth) {\r\n        circleOutlineWidth = this.options.down.circleOutlineWidth;\r\n    } else if (this.isHovered && this.options.hover?.circleOutlineWidth) {\r\n        circleOutlineWidth = this.options.hover.circleOutlineWidth;\r\n    } else if (this.options.circleOutlineWidth) {\r\n        circleOutlineWidth = this.options.circleOutlineWidth;\r\n    }\r\n    let circleOutlineColor = this.options.circleOutlineColor || 0x000000;\r\n    if (this.isDragging && this.options.down?.circleOutlineColor) {\r\n        circleOutlineColor = this.options.down.circleOutlineColor;\r\n    } else if (this.isHovered && this.options.hover?.circleOutlineColor) {\r\n        circleOutlineColor = this.options.hover.circleOutlineColor;\r\n    }\r\n    let circleOutlineOpacity = this.options.circleOutlineOpacity || 1;\r\n    if (this.isDragging && this.options.down?.circleOutlineOpacity) {\r\n        circleOutlineOpacity = this.options.down.circleOutlineOpacity;\r\n    } else if (this.isHovered && this.options.hover?.circleOutlineOpacity) {\r\n        circleOutlineOpacity = this.options.hover.circleOutlineOpacity;\r\n    }\r\n\r\n    this.circleGraphic.lineStyle(circleOutlineWidth, circleOutlineColor, circleOutlineOpacity);\r\n    this.circleGraphic.beginFill(circleColor, circleOpacity);\r\n    this.circleGraphic.drawCircle(0, circleRadius, circleRadius);\r\n    this.circleGraphic.endFill();\r\n\r\n    // position circle to be centered on y axis by the options height\r\n    centerPixiObject(this.circleGraphic, { axis: 'y', parent: { height: this.options.height } });\r\n}\r\n\r\nredrawBar() {\r\n    const t = this.circleGraphic.x;\r\n    const e = this.options.width - t;\r\n    this.backgroundGraphic.clear();\r\n    const i = this.options.opacity || 1;\r\n    this.backgroundGraphic.beginFill(this.options.activeColor, i);\r\n    this.backgroundGraphic.drawRect(0, 0, t, this.options.height);\r\n    this.backgroundGraphic.endFill();\r\n    this.backgroundGraphic.beginFill(this.options.inactiveColor, i);\r\n    this.backgroundGraphic.drawRect(t, 0, e, this.options.height);\r\n    this.backgroundGraphic.endFill();\r\n}\r\n  offChange(t: (v: number) => void) {\r\n    super.off(\"slider-change\", t);\r\n  }\r\n\r\n  onChange(t: (v: number) => void) {\r\n    super.on(\"slider-change\", t);\r\n  }\r\n}\r\nfunction lerp(a: number, b: number, t: number): number {\r\n    return (1 - t) * a + t * b;\r\n}\r\nexport { Slider, SliderOptions };","import { TextField } from './Components/TextInput/TextField';\r\nexport * from './Components/TextInput/TextField';\r\n\r\nexport * from \"./Element\";\r\nimport { PixiElement } from \"./Element\";\r\n\r\nexport * from \"./Components/ScrollList/ScrollList\";\r\nimport { ScrollList } from \"./Components/ScrollList/ScrollList\";\r\n\r\nimport { ScrollBar } from \"./Components/ScrollList/ScrollBar\";\r\nexport * from \"./Components/ScrollList/ScrollBar\";\r\n\r\nimport { Toggle } from './Components/Toggle';\r\nexport * from './Components/Toggle';\r\n\r\nimport { Button } from './Components/Button';\r\nexport * from './Components/Button';\r\n\r\nimport { Slider } from './Components/Slider';\r\nexport * from './Components/Slider';\r\n\r\nimport { string2hex, centerPixiObject } from \"./utils\";\r\n\r\nconst utils = {\r\n    centerPixiObject,\r\n    string2hex\r\n}\r\nexport { utils }\r\n\r\nexport * from './types';\r\n\r\nif(PIXI !== undefined) {\r\n    PIXI['Slider'] = PIXI['Slider'] || Slider;\r\n    PIXI['Toggle'] = PIXI['Toggle'] || Toggle;\r\n    PIXI['TextField'] = PIXI['TextField'] || TextField;\r\n    PIXI['Element'] = PIXI['Element'] || PixiElement;\r\n    PIXI['ScrollBar'] = PIXI['ScrollBar'] || ScrollBar;\r\n    PIXI['ScrollList'] = PIXI['ScrollList'] || ScrollList;\r\n    PIXI['Button'] = PIXI['Button']|| Button;\r\n    if(PIXI.utils && !PIXI.utils['string2hex']) {\r\n        PIXI.utils['string2hex'] = string2hex;\r\n    }\r\n    PIXI.utils['centerObject'] = centerPixiObject;\r\n}\r\n\r\n"],"names":["value","parseLengthMeasurements","measurement","type","strMeasurement","err","clamp","num","min","max","string2hex","string","centerPixiObject","object","opts","parentRect","centerX","centerY","KeyboardHandlerMixin","Base","args","change","newIndex","event","pastedText","newText","selected","_a","_b","code","key","indexes","indexChange","char","defaultStyleOptions","lengthFieldsToValidate","TextFieldClass","font","styleOptions","maxCharacterLength","ignoreKeys","oldDestroy","options","_defaultStyleOptions","parsed","cursorX","error","cursorHeight","yOffset","bottomOffset","topOffset","range","currentCursorX","totalWidth","maxWidth","i","child","start","end","totalHeight","height","_width","e","x","startIndex","endIndex","index","leftChar","newCursorIndex","charChild","replaceWith","replaceWithArray","replacedLength","textArray","deleteCount","startX","endX","position","array","handler","c","TextField","PixiElement","timeout","eventName","element","hold","time","now","delta","currentDragY","diff","sign","dur","timeDiff","power","finishY","yDiff","tweenFunctions","b","_c","d","a","p","s","v","tweenFunctions_1","ScrollBar","scrollList","Scroller","parentTotalHeight","parentMaxHeight","n","y","mouseY","toY","movementY","globalP","globalScrollY","extra","utilizedSpaceForPercent","percent","scrollBar","o","length","defaultPerformanceOptions","ScrollList","scrollStyleOptions","scrollItemOptions","scrollPerformanceOptions","lastScrollY","prev","freeze","container","ix","ax","iy","ay","w","h","force","setFirstVisible","option","canSeeFromTop","canSeeFromBottom","wasVisible","ts","difference","distanceToTraverse","maxTime","absPower","multiplier","containers","fromIndex","toIndex","destroyItem","indexArray","indexOrContainer","indexesToRemove","foundOption","opt","el","point","foundChildren","Bounce","k","easingFunctions","processedEasingFunctions","easingGroup","mainFunction","parseName","name","tests","regex","match","getEasing","path","Color","color","hex","rgb","values","r","g","str","ColorTween","startColorStrings","endColorStrings","callback","frame","frames","endColor","startRGB","frameColor","val","j","interpolated","endColorResult","GLOBAL_PIXI_DTA_PROPERTY_KEY","JustifyContent","FlexDirection","FlexWrap","AnimationType","ToggleAnimationExclusions","DEFAULT_CIRCLE_PADDING","Toggle","isToggled","borderRadius","fontName","onLabel","offLabel","onColor","offColor","offXDiff","offYDiff","onXDiff","colors","progress","traveledDistance","exclude","width","activeColorsArray","inactiveColorsArray","xPosition","circleColor","backgroundColor","Button","text","newState","sprite","borderColor","borderWidth","backgroundTexture","backgroundOpacity","borderOpacity","computedBorderRadius","Slider","t","maxValue","minValue","lerp","_d","_e","_f","_g","_h","_i","_j","_k","_l","circleOpacity","circleRadius","circleOutlineWidth","circleOutlineColor","circleOutlineOpacity","utils"],"mappings":"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","x_google_ignoreList":[4]}